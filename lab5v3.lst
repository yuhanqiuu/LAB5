0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Thu Mar 07 15:27:24 2024
0000              5   ;--------------------------------------------------------
                  5   $name lab5v3
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _getsn
0000             30            public _Get_ADC
0000             31            public _Volts_at_Pin
0000             32            public _ADC_at_Pin
0000             33            public _InitPinADC
0000             34            public _TIMER0_Init
0000             35            public _LCDprint
0000             36            public _LCD_4BIT
0000             37            public _WriteCommand
0000             38            public _WriteData
0000             39            public _LCD_byte
0000             40            public _LCD_pulse
0000             41            public _waitms
0000             42            public _Timer3us
0000             43            public _InitADC
0000             44            public __c51_external_startup
0000             45            public _LCDprint_PARM_3
0000             46            public _getsn_PARM_2
0000             47            public _LCDprint_PARM_2
0000             48            public _flag2
0000             49            public _flag1
0000             50            public _attempt
0000             51            public _passcode
0000             52            public _overflow_count
0000             53            public _state
0000             54   ;--------------------------------------------------------
0000             55   ; Special Function Registers
0000             56   ;--------------------------------------------------------
0000             57   _ACC            DATA 0xe0
0000             58   _ADC0ASAH       DATA 0xb6
0000             59   _ADC0ASAL       DATA 0xb5
0000             60   _ADC0ASCF       DATA 0xa1
0000             61   _ADC0ASCT       DATA 0xc7
0000             62   _ADC0CF0        DATA 0xbc
0000             63   _ADC0CF1        DATA 0xb9
0000             64   _ADC0CF2        DATA 0xdf
0000             65   _ADC0CN0        DATA 0xe8
0000             66   _ADC0CN1        DATA 0xb2
0000             67   _ADC0CN2        DATA 0xb3
0000             68   _ADC0GTH        DATA 0xc4
0000             69   _ADC0GTL        DATA 0xc3
0000             70   _ADC0H          DATA 0xbe
0000             71   _ADC0L          DATA 0xbd
0000             72   _ADC0LTH        DATA 0xc6
0000             73   _ADC0LTL        DATA 0xc5
0000             74   _ADC0MX         DATA 0xbb
0000             75   _B              DATA 0xf0
0000             76   _CKCON0         DATA 0x8e
0000             77   _CKCON1         DATA 0xa6
0000             78   _CLEN0          DATA 0xc6
0000             79   _CLIE0          DATA 0xc7
0000             80   _CLIF0          DATA 0xe8
0000             81   _CLKSEL         DATA 0xa9
0000             82   _CLOUT0         DATA 0xd1
0000             83   _CLU0CF         DATA 0xb1
0000             84   _CLU0FN         DATA 0xaf
0000             85   _CLU0MX         DATA 0x84
0000             86   _CLU1CF         DATA 0xb3
0000             87   _CLU1FN         DATA 0xb2
0000             88   _CLU1MX         DATA 0x85
0000             89   _CLU2CF         DATA 0xb6
0000             90   _CLU2FN         DATA 0xb5
0000             91   _CLU2MX         DATA 0x91
0000             92   _CLU3CF         DATA 0xbf
0000             93   _CLU3FN         DATA 0xbe
0000             94   _CLU3MX         DATA 0xae
0000             95   _CMP0CN0        DATA 0x9b
0000             96   _CMP0CN1        DATA 0x99
0000             97   _CMP0MD         DATA 0x9d
0000             98   _CMP0MX         DATA 0x9f
0000             99   _CMP1CN0        DATA 0xbf
0000            100   _CMP1CN1        DATA 0xac
0000            101   _CMP1MD         DATA 0xab
0000            102   _CMP1MX         DATA 0xaa
0000            103   _CRC0CN0        DATA 0xce
0000            104   _CRC0CN1        DATA 0x86
0000            105   _CRC0CNT        DATA 0xd3
0000            106   _CRC0DAT        DATA 0xcb
0000            107   _CRC0FLIP       DATA 0xcf
0000            108   _CRC0IN         DATA 0xca
0000            109   _CRC0ST         DATA 0xd2
0000            110   _DAC0CF0        DATA 0x91
0000            111   _DAC0CF1        DATA 0x92
0000            112   _DAC0H          DATA 0x85
0000            113   _DAC0L          DATA 0x84
0000            114   _DAC1CF0        DATA 0x93
0000            115   _DAC1CF1        DATA 0x94
0000            116   _DAC1H          DATA 0x8a
0000            117   _DAC1L          DATA 0x89
0000            118   _DAC2CF0        DATA 0x95
0000            119   _DAC2CF1        DATA 0x96
0000            120   _DAC2H          DATA 0x8c
0000            121   _DAC2L          DATA 0x8b
0000            122   _DAC3CF0        DATA 0x9a
0000            123   _DAC3CF1        DATA 0x9c
0000            124   _DAC3H          DATA 0x8e
0000            125   _DAC3L          DATA 0x8d
0000            126   _DACGCF0        DATA 0x88
0000            127   _DACGCF1        DATA 0x98
0000            128   _DACGCF2        DATA 0xa2
0000            129   _DERIVID        DATA 0xad
0000            130   _DEVICEID       DATA 0xb5
0000            131   _DPH            DATA 0x83
0000            132   _DPL            DATA 0x82
0000            133   _EIE1           DATA 0xe6
0000            134   _EIE2           DATA 0xf3
0000            135   _EIP1           DATA 0xbb
0000            136   _EIP1H          DATA 0xee
0000            137   _EIP2           DATA 0xed
0000            138   _EIP2H          DATA 0xf6
0000            139   _EMI0CN         DATA 0xe7
0000            140   _FLKEY          DATA 0xb7
0000            141   _HFO0CAL        DATA 0xc7
0000            142   _HFO1CAL        DATA 0xd6
0000            143   _HFOCN          DATA 0xef
0000            144   _I2C0ADM        DATA 0xff
0000            145   _I2C0CN0        DATA 0xba
0000            146   _I2C0DIN        DATA 0xbc
0000            147   _I2C0DOUT       DATA 0xbb
0000            148   _I2C0FCN0       DATA 0xad
0000            149   _I2C0FCN1       DATA 0xab
0000            150   _I2C0FCT        DATA 0xf5
0000            151   _I2C0SLAD       DATA 0xbd
0000            152   _I2C0STAT       DATA 0xb9
0000            153   _IE             DATA 0xa8
0000            154   _IP             DATA 0xb8
0000            155   _IPH            DATA 0xf2
0000            156   _IT01CF         DATA 0xe4
0000            157   _LFO0CN         DATA 0xb1
0000            158   _P0             DATA 0x80
0000            159   _P0MASK         DATA 0xfe
0000            160   _P0MAT          DATA 0xfd
0000            161   _P0MDIN         DATA 0xf1
0000            162   _P0MDOUT        DATA 0xa4
0000            163   _P0SKIP         DATA 0xd4
0000            164   _P1             DATA 0x90
0000            165   _P1MASK         DATA 0xee
0000            166   _P1MAT          DATA 0xed
0000            167   _P1MDIN         DATA 0xf2
0000            168   _P1MDOUT        DATA 0xa5
0000            169   _P1SKIP         DATA 0xd5
0000            170   _P2             DATA 0xa0
0000            171   _P2MASK         DATA 0xfc
0000            172   _P2MAT          DATA 0xfb
0000            173   _P2MDIN         DATA 0xf3
0000            174   _P2MDOUT        DATA 0xa6
0000            175   _P2SKIP         DATA 0xcc
0000            176   _P3             DATA 0xb0
0000            177   _P3MDIN         DATA 0xf4
0000            178   _P3MDOUT        DATA 0x9c
0000            179   _PCA0CENT       DATA 0x9e
0000            180   _PCA0CLR        DATA 0x9c
0000            181   _PCA0CN0        DATA 0xd8
0000            182   _PCA0CPH0       DATA 0xfc
0000            183   _PCA0CPH1       DATA 0xea
0000            184   _PCA0CPH2       DATA 0xec
0000            185   _PCA0CPH3       DATA 0xf5
0000            186   _PCA0CPH4       DATA 0x85
0000            187   _PCA0CPH5       DATA 0xde
0000            188   _PCA0CPL0       DATA 0xfb
0000            189   _PCA0CPL1       DATA 0xe9
0000            190   _PCA0CPL2       DATA 0xeb
0000            191   _PCA0CPL3       DATA 0xf4
0000            192   _PCA0CPL4       DATA 0x84
0000            193   _PCA0CPL5       DATA 0xdd
0000            194   _PCA0CPM0       DATA 0xda
0000            195   _PCA0CPM1       DATA 0xdb
0000            196   _PCA0CPM2       DATA 0xdc
0000            197   _PCA0CPM3       DATA 0xae
0000            198   _PCA0CPM4       DATA 0xaf
0000            199   _PCA0CPM5       DATA 0xcc
0000            200   _PCA0H          DATA 0xfa
0000            201   _PCA0L          DATA 0xf9
0000            202   _PCA0MD         DATA 0xd9
0000            203   _PCA0POL        DATA 0x96
0000            204   _PCA0PWM        DATA 0xf7
0000            205   _PCON0          DATA 0x87
0000            206   _PCON1          DATA 0xcd
0000            207   _PFE0CN         DATA 0xc1
0000            208   _PRTDRV         DATA 0xf6
0000            209   _PSCTL          DATA 0x8f
0000            210   _PSTAT0         DATA 0xaa
0000            211   _PSW            DATA 0xd0
0000            212   _REF0CN         DATA 0xd1
0000            213   _REG0CN         DATA 0xc9
0000            214   _REVID          DATA 0xb6
0000            215   _RSTSRC         DATA 0xef
0000            216   _SBCON1         DATA 0x94
0000            217   _SBRLH1         DATA 0x96
0000            218   _SBRLL1         DATA 0x95
0000            219   _SBUF           DATA 0x99
0000            220   _SBUF0          DATA 0x99
0000            221   _SBUF1          DATA 0x92
0000            222   _SCON           DATA 0x98
0000            223   _SCON0          DATA 0x98
0000            224   _SCON1          DATA 0xc8
0000            225   _SFRPAGE        DATA 0xa7
0000            226   _SFRPGCN        DATA 0xbc
0000            227   _SFRSTACK       DATA 0xd7
0000            228   _SMB0ADM        DATA 0xd6
0000            229   _SMB0ADR        DATA 0xd7
0000            230   _SMB0CF         DATA 0xc1
0000            231   _SMB0CN0        DATA 0xc0
0000            232   _SMB0DAT        DATA 0xc2
0000            233   _SMB0FCN0       DATA 0xc3
0000            234   _SMB0FCN1       DATA 0xc4
0000            235   _SMB0FCT        DATA 0xef
0000            236   _SMB0RXLN       DATA 0xc5
0000            237   _SMB0TC         DATA 0xac
0000            238   _SMOD1          DATA 0x93
0000            239   _SP             DATA 0x81
0000            240   _SPI0CFG        DATA 0xa1
0000            241   _SPI0CKR        DATA 0xa2
0000            242   _SPI0CN0        DATA 0xf8
0000            243   _SPI0DAT        DATA 0xa3
0000            244   _SPI0FCN0       DATA 0x9a
0000            245   _SPI0FCN1       DATA 0x9b
0000            246   _SPI0FCT        DATA 0xf7
0000            247   _SPI0PCF        DATA 0xdf
0000            248   _TCON           DATA 0x88
0000            249   _TH0            DATA 0x8c
0000            250   _TH1            DATA 0x8d
0000            251   _TL0            DATA 0x8a
0000            252   _TL1            DATA 0x8b
0000            253   _TMOD           DATA 0x89
0000            254   _TMR2CN0        DATA 0xc8
0000            255   _TMR2CN1        DATA 0xfd
0000            256   _TMR2H          DATA 0xcf
0000            257   _TMR2L          DATA 0xce
0000            258   _TMR2RLH        DATA 0xcb
0000            259   _TMR2RLL        DATA 0xca
0000            260   _TMR3CN0        DATA 0x91
0000            261   _TMR3CN1        DATA 0xfe
0000            262   _TMR3H          DATA 0x95
0000            263   _TMR3L          DATA 0x94
0000            264   _TMR3RLH        DATA 0x93
0000            265   _TMR3RLL        DATA 0x92
0000            266   _TMR4CN0        DATA 0x98
0000            267   _TMR4CN1        DATA 0xff
0000            268   _TMR4H          DATA 0xa5
0000            269   _TMR4L          DATA 0xa4
0000            270   _TMR4RLH        DATA 0xa3
0000            271   _TMR4RLL        DATA 0xa2
0000            272   _TMR5CN0        DATA 0xc0
0000            273   _TMR5CN1        DATA 0xf1
0000            274   _TMR5H          DATA 0xd5
0000            275   _TMR5L          DATA 0xd4
0000            276   _TMR5RLH        DATA 0xd3
0000            277   _TMR5RLL        DATA 0xd2
0000            278   _UART0PCF       DATA 0xd9
0000            279   _UART1FCN0      DATA 0x9d
0000            280   _UART1FCN1      DATA 0xd8
0000            281   _UART1FCT       DATA 0xfa
0000            282   _UART1LIN       DATA 0x9e
0000            283   _UART1PCF       DATA 0xda
0000            284   _VDM0CN         DATA 0xff
0000            285   _WDTCN          DATA 0x97
0000            286   _XBR0           DATA 0xe1
0000            287   _XBR1           DATA 0xe2
0000            288   _XBR2           DATA 0xe3
0000            289   _XOSC0CN        DATA 0x86
0000            290   _DPTR           DATA 0x8382
0000            291   _TMR2RL         DATA 0xcbca
0000            292   _TMR3RL         DATA 0x9392
0000            293   _TMR4RL         DATA 0xa3a2
0000            294   _TMR5RL         DATA 0xd3d2
0000            295   _TMR0           DATA 0x8c8a
0000            296   _TMR1           DATA 0x8d8b
0000            297   _TMR2           DATA 0xcfce
0000            298   _TMR3           DATA 0x9594
0000            299   _TMR4           DATA 0xa5a4
0000            300   _TMR5           DATA 0xd5d4
0000            301   _SBRL1          DATA 0x9695
0000            302   _PCA0           DATA 0xfaf9
0000            303   _PCA0CP0        DATA 0xfcfb
0000            304   _PCA0CP1        DATA 0xeae9
0000            305   _PCA0CP2        DATA 0xeceb
0000            306   _PCA0CP3        DATA 0xf5f4
0000            307   _PCA0CP4        DATA 0x8584
0000            308   _PCA0CP5        DATA 0xdedd
0000            309   _ADC0ASA        DATA 0xb6b5
0000            310   _ADC0GT         DATA 0xc4c3
0000            311   _ADC0           DATA 0xbebd
0000            312   _ADC0LT         DATA 0xc6c5
0000            313   _DAC0           DATA 0x8584
0000            314   _DAC1           DATA 0x8a89
0000            315   _DAC2           DATA 0x8c8b
0000            316   _DAC3           DATA 0x8e8d
0000            317   ;--------------------------------------------------------
0000            318   ; special function bits
0000            319   ;--------------------------------------------------------
0000            320   _ACC_0          BIT 0xe0
0000            321   _ACC_1          BIT 0xe1
0000            322   _ACC_2          BIT 0xe2
0000            323   _ACC_3          BIT 0xe3
0000            324   _ACC_4          BIT 0xe4
0000            325   _ACC_5          BIT 0xe5
0000            326   _ACC_6          BIT 0xe6
0000            327   _ACC_7          BIT 0xe7
0000            328   _TEMPE          BIT 0xe8
0000            329   _ADGN0          BIT 0xe9
0000            330   _ADGN1          BIT 0xea
0000            331   _ADWINT         BIT 0xeb
0000            332   _ADBUSY         BIT 0xec
0000            333   _ADINT          BIT 0xed
0000            334   _IPOEN          BIT 0xee
0000            335   _ADEN           BIT 0xef
0000            336   _B_0            BIT 0xf0
0000            337   _B_1            BIT 0xf1
0000            338   _B_2            BIT 0xf2
0000            339   _B_3            BIT 0xf3
0000            340   _B_4            BIT 0xf4
0000            341   _B_5            BIT 0xf5
0000            342   _B_6            BIT 0xf6
0000            343   _B_7            BIT 0xf7
0000            344   _C0FIF          BIT 0xe8
0000            345   _C0RIF          BIT 0xe9
0000            346   _C1FIF          BIT 0xea
0000            347   _C1RIF          BIT 0xeb
0000            348   _C2FIF          BIT 0xec
0000            349   _C2RIF          BIT 0xed
0000            350   _C3FIF          BIT 0xee
0000            351   _C3RIF          BIT 0xef
0000            352   _D1SRC0         BIT 0x88
0000            353   _D1SRC1         BIT 0x89
0000            354   _D1AMEN         BIT 0x8a
0000            355   _D01REFSL       BIT 0x8b
0000            356   _D3SRC0         BIT 0x8c
0000            357   _D3SRC1         BIT 0x8d
0000            358   _D3AMEN         BIT 0x8e
0000            359   _D23REFSL       BIT 0x8f
0000            360   _D0UDIS         BIT 0x98
0000            361   _D1UDIS         BIT 0x99
0000            362   _D2UDIS         BIT 0x9a
0000            363   _D3UDIS         BIT 0x9b
0000            364   _EX0            BIT 0xa8
0000            365   _ET0            BIT 0xa9
0000            366   _EX1            BIT 0xaa
0000            367   _ET1            BIT 0xab
0000            368   _ES0            BIT 0xac
0000            369   _ET2            BIT 0xad
0000            370   _ESPI0          BIT 0xae
0000            371   _EA             BIT 0xaf
0000            372   _PX0            BIT 0xb8
0000            373   _PT0            BIT 0xb9
0000            374   _PX1            BIT 0xba
0000            375   _PT1            BIT 0xbb
0000            376   _PS0            BIT 0xbc
0000            377   _PT2            BIT 0xbd
0000            378   _PSPI0          BIT 0xbe
0000            379   _P0_0           BIT 0x80
0000            380   _P0_1           BIT 0x81
0000            381   _P0_2           BIT 0x82
0000            382   _P0_3           BIT 0x83
0000            383   _P0_4           BIT 0x84
0000            384   _P0_5           BIT 0x85
0000            385   _P0_6           BIT 0x86
0000            386   _P0_7           BIT 0x87
0000            387   _P1_0           BIT 0x90
0000            388   _P1_1           BIT 0x91
0000            389   _P1_2           BIT 0x92
0000            390   _P1_3           BIT 0x93
0000            391   _P1_4           BIT 0x94
0000            392   _P1_5           BIT 0x95
0000            393   _P1_6           BIT 0x96
0000            394   _P1_7           BIT 0x97
0000            395   _P2_0           BIT 0xa0
0000            396   _P2_1           BIT 0xa1
0000            397   _P2_2           BIT 0xa2
0000            398   _P2_3           BIT 0xa3
0000            399   _P2_4           BIT 0xa4
0000            400   _P2_5           BIT 0xa5
0000            401   _P2_6           BIT 0xa6
0000            402   _P3_0           BIT 0xb0
0000            403   _P3_1           BIT 0xb1
0000            404   _P3_2           BIT 0xb2
0000            405   _P3_3           BIT 0xb3
0000            406   _P3_4           BIT 0xb4
0000            407   _P3_7           BIT 0xb7
0000            408   _CCF0           BIT 0xd8
0000            409   _CCF1           BIT 0xd9
0000            410   _CCF2           BIT 0xda
0000            411   _CCF3           BIT 0xdb
0000            412   _CCF4           BIT 0xdc
0000            413   _CCF5           BIT 0xdd
0000            414   _CR             BIT 0xde
0000            415   _CF             BIT 0xdf
0000            416   _PARITY         BIT 0xd0
0000            417   _F1             BIT 0xd1
0000            418   _OV             BIT 0xd2
0000            419   _RS0            BIT 0xd3
0000            420   _RS1            BIT 0xd4
0000            421   _F0             BIT 0xd5
0000            422   _AC             BIT 0xd6
0000            423   _CY             BIT 0xd7
0000            424   _RI             BIT 0x98
0000            425   _TI             BIT 0x99
0000            426   _RB8            BIT 0x9a
0000            427   _TB8            BIT 0x9b
0000            428   _REN            BIT 0x9c
0000            429   _CE             BIT 0x9d
0000            430   _SMODE          BIT 0x9e
0000            431   _RI1            BIT 0xc8
0000            432   _TI1            BIT 0xc9
0000            433   _RBX1           BIT 0xca
0000            434   _TBX1           BIT 0xcb
0000            435   _REN1           BIT 0xcc
0000            436   _PERR1          BIT 0xcd
0000            437   _OVR1           BIT 0xce
0000            438   _SI             BIT 0xc0
0000            439   _ACK            BIT 0xc1
0000            440   _ARBLOST        BIT 0xc2
0000            441   _ACKRQ          BIT 0xc3
0000            442   _STO            BIT 0xc4
0000            443   _STA            BIT 0xc5
0000            444   _TXMODE         BIT 0xc6
0000            445   _MASTER         BIT 0xc7
0000            446   _SPIEN          BIT 0xf8
0000            447   _TXNF           BIT 0xf9
0000            448   _NSSMD0         BIT 0xfa
0000            449   _NSSMD1         BIT 0xfb
0000            450   _RXOVRN         BIT 0xfc
0000            451   _MODF           BIT 0xfd
0000            452   _WCOL           BIT 0xfe
0000            453   _SPIF           BIT 0xff
0000            454   _IT0            BIT 0x88
0000            455   _IE0            BIT 0x89
0000            456   _IT1            BIT 0x8a
0000            457   _IE1            BIT 0x8b
0000            458   _TR0            BIT 0x8c
0000            459   _TF0            BIT 0x8d
0000            460   _TR1            BIT 0x8e
0000            461   _TF1            BIT 0x8f
0000            462   _T2XCLK0        BIT 0xc8
0000            463   _T2XCLK1        BIT 0xc9
0000            464   _TR2            BIT 0xca
0000            465   _T2SPLIT        BIT 0xcb
0000            466   _TF2CEN         BIT 0xcc
0000            467   _TF2LEN         BIT 0xcd
0000            468   _TF2L           BIT 0xce
0000            469   _TF2H           BIT 0xcf
0000            470   _T4XCLK0        BIT 0x98
0000            471   _T4XCLK1        BIT 0x99
0000            472   _TR4            BIT 0x9a
0000            473   _T4SPLIT        BIT 0x9b
0000            474   _TF4CEN         BIT 0x9c
0000            475   _TF4LEN         BIT 0x9d
0000            476   _TF4L           BIT 0x9e
0000            477   _TF4H           BIT 0x9f
0000            478   _T5XCLK0        BIT 0xc0
0000            479   _T5XCLK1        BIT 0xc1
0000            480   _TR5            BIT 0xc2
0000            481   _T5SPLIT        BIT 0xc3
0000            482   _TF5CEN         BIT 0xc4
0000            483   _TF5LEN         BIT 0xc5
0000            484   _TF5L           BIT 0xc6
0000            485   _TF5H           BIT 0xc7
0000            486   _RIE            BIT 0xd8
0000            487   _RXTO0          BIT 0xd9
0000            488   _RXTO1          BIT 0xda
0000            489   _RFRQ           BIT 0xdb
0000            490   _TIE            BIT 0xdc
0000            491   _TXHOLD         BIT 0xdd
0000            492   _TXNF1          BIT 0xde
0000            493   _TFRQ           BIT 0xdf
0000            494   ;--------------------------------------------------------
0000            495   ; overlayable register banks
0000            496   ;--------------------------------------------------------
0000            497            rbank0 segment data overlay
0000            498   ;--------------------------------------------------------
0000            499   ; internal ram data
0000            500   ;--------------------------------------------------------
0000            501            rseg R_DSEG
0000            502   _state:
0000            503            ds 2
0002            504   _overflow_count:
0002            505            ds 1
0003            506   _passcode:
0003            507            ds 2
0005            508   _attempt:
0005            509            ds 2
0007            510   _flag1:
0007            511            ds 2
0009            512   _flag2:
0009            513            ds 2
000B            514   _LCDprint_PARM_2:
000B            515            ds 1
000C            516   _getsn_PARM_2:
000C            517            ds 2
000E            518   _getsn_buff_1_96:
000E            519            ds 3
0011            520   _getsn_sloc0_1_0:
0011            521            ds 2
0013            522   _main_num1_1_102:
0013            523            ds 2
0015            524   _main_num2_1_102:
0015            525            ds 2
0017            526   _main_mst_1_102:
0017            527            ds 4
001B            528   _main_i_1_102:
001B            529            ds 2
001D            530   _main_vmax1_1_102:
001D            531            ds 4
0021            532   _main_vmax2_1_102:
0021            533            ds 4
0025            534   _main_degrees_1_102:
0025            535            ds 4
0029            536   _main_p_n_1_102:
0029            537            ds 4
002D            538   _main_sloc0_1_0:
002D            539            ds 4
0031            540   ;--------------------------------------------------------
0031            541   ; overlayable items in internal ram 
0031            542   ;--------------------------------------------------------
0000            543            rseg    R_OSEG
0000            544            rseg    R_OSEG
0000            545   _InitPinADC_PARM_2:
0000            546            ds 1
0001            547            rseg    R_OSEG
0001            548   ;--------------------------------------------------------
0001            549   ; indirectly addressable internal ram data
0001            550   ;--------------------------------------------------------
0000            551            rseg R_ISEG
0000            552   _main_v_1_102:
0000            553            ds 8
0008            554   _main_buff1_1_102:
0008            555            ds 17
0019            556   _main_buff2_1_102:
0019            557            ds 17
002A            558   _main_buff0_1_102:
002A            559            ds 17
003B            560   ;--------------------------------------------------------
003B            561   ; absolute internal ram data
003B            562   ;--------------------------------------------------------
0000            563            DSEG
0000            564   ;--------------------------------------------------------
0000            565   ; bit data
0000            566   ;--------------------------------------------------------
0000            567            rseg R_BSEG
0000            568   _LCDprint_PARM_3:
0000            569            DBIT    1
0001            570   ;--------------------------------------------------------
0001            571   ; paged external ram data
0001            572   ;--------------------------------------------------------
0000            573            rseg R_PSEG
0000            574   ;--------------------------------------------------------
0000            575   ; external ram data
0000            576   ;--------------------------------------------------------
0000            577            rseg R_XSEG
0000            578   ;--------------------------------------------------------
0000            579   ; absolute external ram data
0000            580   ;--------------------------------------------------------
0000            581            XSEG
0000            582   ;--------------------------------------------------------
0000            583   ; external initialized ram data
0000            584   ;--------------------------------------------------------
0000            585            rseg R_IXSEG
0000            586            rseg R_HOME
0000            587            rseg R_GSINIT
0000            588            rseg R_CSEG
0000            589   ;--------------------------------------------------------
0000            590   ; Reset entry point and interrupt vectors
0000            591   ;--------------------------------------------------------
0000            592            CSEG at 0x0000
0000 020000     593            ljmp    _crt0
0003            594   ;--------------------------------------------------------
0003            595   ; global & static initialisations
0003            596   ;--------------------------------------------------------
0000            597            rseg R_HOME
0000            598            rseg R_GSINIT
0000            599            rseg R_GSINIT
0000            600   ;--------------------------------------------------------
0000            601   ; data variables initialization
0000            602   ;--------------------------------------------------------
0000            603            rseg R_DINIT
0000            604   ;        D:\clone\LAB5\lab5v3.c:29: unsigned int state=0;
0000 E4         605            clr     a
0001 F578       606            mov     _state,a
0003 F579       607            mov     (_state + 1),a
0005            608   ;        D:\clone\LAB5\lab5v3.c:31: unsigned int passcode=292,attempt=0,flag1=0,flag2=0;
0005 75F824     609            mov     _passcode,#0x24
0008 75F901     610            mov     (_passcode + 1),#0x01
000B            611   ;        D:\clone\LAB5\lab5v3.c:31: char _c51_external_startup (void)
000B E4         612            clr     a
000C F5B8       613            mov     _attempt,a
000E F5B9       614            mov     (_attempt + 1),a
0010            615   ;        D:\clone\LAB5\lab5v3.c:31: unsigned int passcode=292,attempt=0,flag1=0,flag2=0;
0010 E4         616            clr     a
0011 F578       617            mov     _flag1,a
0013 F579       618            mov     (_flag1 + 1),a
0015            619   ;        D:\clone\LAB5\lab5v3.c:31: char _c51_external_startup (void)
0015 E4         620            clr     a
0016 F538       621            mov     _flag2,a
0018 F539       622            mov     (_flag2 + 1),a
001A            623            ; The linker places a 'ret' at the end of segment R_DINIT.
001A            624   ;--------------------------------------------------------
001A            625   ; code
001A            626   ;--------------------------------------------------------
0000            627            rseg R_CSEG
0000            628   ;------------------------------------------------------------
0000            629   ;Allocation info for local variables in function '_c51_external_startup'
0000            630   ;------------------------------------------------------------
0000            631   ;------------------------------------------------------------
0000            632   ;        D:\clone\LAB5\lab5v3.c:32: char _c51_external_startup (void)
0000            633   ;        -----------------------------------------
0000            634   ;         function _c51_external_startup
0000            635   ;        -----------------------------------------
0000            636   __c51_external_startup:
0000            637            using   0
0000            638   ;        D:\clone\LAB5\lab5v3.c:35: SFRPAGE = 0x00;
0000 75A700     639            mov     _SFRPAGE,#0x00
0003            640   ;        D:\clone\LAB5\lab5v3.c:36: WDTCN = 0xDE; //First key
0003 7597DE     641            mov     _WDTCN,#0xDE
0006            642   ;        D:\clone\LAB5\lab5v3.c:37: WDTCN = 0xAD; //Second key
0006 7597AD     643            mov     _WDTCN,#0xAD
0009            644   ;        D:\clone\LAB5\lab5v3.c:39: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     645            mov     _VDM0CN,#0x80
000C            646   ;        D:\clone\LAB5\lab5v3.c:40: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     647            mov     _RSTSRC,#0x06
000F            648   ;        D:\clone\LAB5\lab5v3.c:47: SFRPAGE = 0x10;
000F 75A710     649            mov     _SFRPAGE,#0x10
0012            650   ;        D:\clone\LAB5\lab5v3.c:48: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     651            mov     _PFE0CN,#0x20
0015            652   ;        D:\clone\LAB5\lab5v3.c:49: SFRPAGE = 0x00;
0015 75A700     653            mov     _SFRPAGE,#0x00
0018            654   ;        D:\clone\LAB5\lab5v3.c:70: CLKSEL = 0x00;
0018 75A900     655            mov     _CLKSEL,#0x00
001B            656   ;        D:\clone\LAB5\lab5v3.c:71: CLKSEL = 0x00;
001B 75A900     657            mov     _CLKSEL,#0x00
001E            658   ;        D:\clone\LAB5\lab5v3.c:72: while ((CLKSEL & 0x80) == 0);
001E            659   L002001?:
001E E5A9       660            mov     a,_CLKSEL
0020 30E720     661            jnb     acc.7,L002001?
0023            662   ;        D:\clone\LAB5\lab5v3.c:73: CLKSEL = 0x03;
0023 75A903     663            mov     _CLKSEL,#0x03
0026            664   ;        D:\clone\LAB5\lab5v3.c:74: CLKSEL = 0x03;
0026 75A903     665            mov     _CLKSEL,#0x03
0029            666   ;        D:\clone\LAB5\lab5v3.c:75: while ((CLKSEL & 0x80) == 0);
0029            667   L002004?:
0029 E5A9       668            mov     a,_CLKSEL
002B 30E7A0     669            jnb     acc.7,L002004?
002E            670   ;        D:\clone\LAB5\lab5v3.c:80: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     671            orl     _P0MDOUT,#0x10
0031            672   ;        D:\clone\LAB5\lab5v3.c:81: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     673            mov     _XBR0,#0x01
0034            674   ;        D:\clone\LAB5\lab5v3.c:82: XBR1     = 0X00;
0034 75E200     675            mov     _XBR1,#0x00
0037            676   ;        D:\clone\LAB5\lab5v3.c:83: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     677            mov     _XBR2,#0x40
003A            678   ;        D:\clone\LAB5\lab5v3.c:89: SCON0 = 0x10;
003A 759810     679            mov     _SCON0,#0x10
003D            680   ;        D:\clone\LAB5\lab5v3.c:90: CKCON0 |= 0b_0000_0000 ; // Timer 1 uses the system clock divided by 12.
003D 858E8E     681            mov     _CKCON0,_CKCON0
0040            682   ;        D:\clone\LAB5\lab5v3.c:92: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     683            mov     _TH1,#0xE6
0043            684   ;        D:\clone\LAB5\lab5v3.c:93: TL1 = TH1;      // Init Timer1
0043 858D8B     685            mov     _TL1,_TH1
0046            686   ;        D:\clone\LAB5\lab5v3.c:94: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     687            anl     _TMOD,#0x0F
0049            688   ;        D:\clone\LAB5\lab5v3.c:95: TMOD |=  0x20;                       
0049 438920     689            orl     _TMOD,#0x20
004C            690   ;        D:\clone\LAB5\lab5v3.c:96: TR1 = 1; // START Timer1
004C D28E       691            setb    _TR1
004E            692   ;        D:\clone\LAB5\lab5v3.c:97: TI = 1;  // Indicate TX0 ready
004E D299       693            setb    _TI
0050            694   ;        D:\clone\LAB5\lab5v3.c:99: return 0;
0050 758200     695            mov     dpl,#0x00
0053 22         696            ret
0054            697   ;------------------------------------------------------------
0054            698   ;Allocation info for local variables in function 'InitADC'
0054            699   ;------------------------------------------------------------
0054            700   ;------------------------------------------------------------
0054            701   ;        D:\clone\LAB5\lab5v3.c:102: void InitADC (void)
0054            702   ;        -----------------------------------------
0054            703   ;         function InitADC
0054            704   ;        -----------------------------------------
0054            705   _InitADC:
0054            706   ;        D:\clone\LAB5\lab5v3.c:104: SFRPAGE = 0x00;
0054 75A700     707            mov     _SFRPAGE,#0x00
0057            708   ;        D:\clone\LAB5\lab5v3.c:105: ADEN=0; // Disable ADC
0057 C2EF       709            clr     _ADEN
0059            710   ;        D:\clone\LAB5\lab5v3.c:110: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0059 75B280     711            mov     _ADC0CN1,#0x80
005C            712   ;        D:\clone\LAB5\lab5v3.c:114: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
005C 75BC20     713            mov     _ADC0CF0,#0x20
005F            714   ;        D:\clone\LAB5\lab5v3.c:118: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005F 75B91E     715            mov     _ADC0CF1,#0x1E
0062            716   ;        D:\clone\LAB5\lab5v3.c:127: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0062 75E800     717            mov     _ADC0CN0,#0x00
0065            718   ;        D:\clone\LAB5\lab5v3.c:132: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0065 75DF3F     719            mov     _ADC0CF2,#0x3F
0068            720   ;        D:\clone\LAB5\lab5v3.c:136: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0068 75B300     721            mov     _ADC0CN2,#0x00
006B            722   ;        D:\clone\LAB5\lab5v3.c:138: ADEN=1; // Enable ADC
006B D2EF       723            setb    _ADEN
006D 22         724            ret
006E            725   ;------------------------------------------------------------
006E            726   ;Allocation info for local variables in function 'Timer3us'
006E            727   ;------------------------------------------------------------
006E            728   ;us                        Allocated to registers r2 
006E            729   ;i                         Allocated to registers r3 
006E            730   ;------------------------------------------------------------
006E            731   ;        D:\clone\LAB5\lab5v3.c:142: void Timer3us(unsigned char us)
006E            732   ;        -----------------------------------------
006E            733   ;         function Timer3us
006E            734   ;        -----------------------------------------
006E            735   _Timer3us:
006E AA82       736            mov     r2,dpl
0070            737   ;        D:\clone\LAB5\lab5v3.c:147: CKCON0|=0b_0100_0000;
0070 438E40     738            orl     _CKCON0,#0x40
0073            739   ;        D:\clone\LAB5\lab5v3.c:149: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0073 7592B8     740            mov     _TMR3RL,#0xB8
0076 7593FF     741            mov     (_TMR3RL >> 8),#0xFF
0079            742   ;        D:\clone\LAB5\lab5v3.c:150: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0079 859294     743            mov     _TMR3,_TMR3RL
007C 859395     744            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007F            745   ;        D:\clone\LAB5\lab5v3.c:152: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007F 759104     746            mov     _TMR3CN0,#0x04
0082            747   ;        D:\clone\LAB5\lab5v3.c:153: for (i = 0; i < us; i++)       // Count <us> overflows
0082 7B00       748            mov     r3,#0x00
0084            749   L004004?:
0084 C3         750            clr     c
0085 EB         751            mov     a,r3
0086 9A         752            subb    a,r2
0087 5000       753            jnc     L004007?
0089            754   ;        D:\clone\LAB5\lab5v3.c:155: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0089            755   L004001?:
0089 E591       756            mov     a,_TMR3CN0
008B 30E7A0     757            jnb     acc.7,L004001?
008E            758   ;        D:\clone\LAB5\lab5v3.c:156: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008E 53917F     759            anl     _TMR3CN0,#0x7F
0091            760   ;        D:\clone\LAB5\lab5v3.c:153: for (i = 0; i < us; i++)       // Count <us> overflows
0091 0B         761            inc     r3
0092 8000       762            sjmp    L004004?
0094            763   L004007?:
0094            764   ;        D:\clone\LAB5\lab5v3.c:158: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0094 759100     765            mov     _TMR3CN0,#0x00
0097 22         766            ret
0098            767   ;------------------------------------------------------------
0098            768   ;Allocation info for local variables in function 'waitms'
0098            769   ;------------------------------------------------------------
0098            770   ;ms                        Allocated to registers r2 r3 
0098            771   ;j                         Allocated to registers r4 r5 
0098            772   ;k                         Allocated to registers r6 
0098            773   ;------------------------------------------------------------
0098            774   ;        D:\clone\LAB5\lab5v3.c:161: void waitms (unsigned int ms)
0098            775   ;        -----------------------------------------
0098            776   ;         function waitms
0098            777   ;        -----------------------------------------
0098            778   _waitms:
0098 AA82       779            mov     r2,dpl
009A AB83       780            mov     r3,dph
009C            781   ;        D:\clone\LAB5\lab5v3.c:165: for(j=0; j<ms; j++)
009C 7C00       782            mov     r4,#0x00
009E 7D00       783            mov     r5,#0x00
00A0            784   L005005?:
00A0 C3         785            clr     c
00A1 EC         786            mov     a,r4
00A2 9A         787            subb    a,r2
00A3 ED         788            mov     a,r5
00A4 9B         789            subb    a,r3
00A5 5000       790            jnc     L005009?
00A7            791   ;        D:\clone\LAB5\lab5v3.c:166: for (k=0; k<4; k++) Timer3us(250);
00A7 7E00       792            mov     r6,#0x00
00A9            793   L005001?:
00A9 BE04E0     794            cjne    r6,#0x04,L005018?
00AC            795   L005018?:
00AC 5000       796            jnc     L005007?
00AE 7582FA     797            mov     dpl,#0xFA
00B1 C002       798            push    ar2
00B3 C003       799            push    ar3
00B5 C004       800            push    ar4
00B7 C005       801            push    ar5
00B9 C006       802            push    ar6
00BB 120000     803            lcall   _Timer3us
00BE D006       804            pop     ar6
00C0 D005       805            pop     ar5
00C2 D004       806            pop     ar4
00C4 D003       807            pop     ar3
00C6 D002       808            pop     ar2
00C8 0E         809            inc     r6
00C9 8000       810            sjmp    L005001?
00CB            811   L005007?:
00CB            812   ;        D:\clone\LAB5\lab5v3.c:165: for(j=0; j<ms; j++)
00CB 0C         813            inc     r4
00CC BC0020     814            cjne    r4,#0x00,L005005?
00CF 0D         815            inc     r5
00D0 8000       816            sjmp    L005005?
00D2            817   L005009?:
00D2 22         818            ret
00D3            819   ;------------------------------------------------------------
00D3            820   ;Allocation info for local variables in function 'LCD_pulse'
00D3            821   ;------------------------------------------------------------
00D3            822   ;------------------------------------------------------------
00D3            823   ;        D:\clone\LAB5\lab5v3.c:169: void LCD_pulse (void)
00D3            824   ;        -----------------------------------------
00D3            825   ;         function LCD_pulse
00D3            826   ;        -----------------------------------------
00D3            827   _LCD_pulse:
00D3            828   ;        D:\clone\LAB5\lab5v3.c:171: LCD_E=1;
00D3 D2A0       829            setb    _P2_0
00D5            830   ;        D:\clone\LAB5\lab5v3.c:172: Timer3us(40);
00D5 758228     831            mov     dpl,#0x28
00D8 120000     832            lcall   _Timer3us
00DB            833   ;        D:\clone\LAB5\lab5v3.c:173: LCD_E=0;
00DB C2A0       834            clr     _P2_0
00DD 22         835            ret
00DE            836   ;------------------------------------------------------------
00DE            837   ;Allocation info for local variables in function 'LCD_byte'
00DE            838   ;------------------------------------------------------------
00DE            839   ;x                         Allocated to registers r2 
00DE            840   ;------------------------------------------------------------
00DE            841   ;        D:\clone\LAB5\lab5v3.c:176: void LCD_byte (unsigned char x)
00DE            842   ;        -----------------------------------------
00DE            843   ;         function LCD_byte
00DE            844   ;        -----------------------------------------
00DE            845   _LCD_byte:
00DE AA82       846            mov     r2,dpl
00E0            847   ;        D:\clone\LAB5\lab5v3.c:179: ACC=x; //Send high nible
00E0 8AE0       848            mov     _ACC,r2
00E2            849   ;        D:\clone\LAB5\lab5v3.c:180: LCD_D7=ACC_7;
00E2 A2E7       850            mov     c,_ACC_7
00E4 9290       851            mov     _P1_0,c
00E6            852   ;        D:\clone\LAB5\lab5v3.c:181: LCD_D6=ACC_6;
00E6 A2E6       853            mov     c,_ACC_6
00E8 9291       854            mov     _P1_1,c
00EA            855   ;        D:\clone\LAB5\lab5v3.c:182: LCD_D5=ACC_5;
00EA A2E5       856            mov     c,_ACC_5
00EC 9292       857            mov     _P1_2,c
00EE            858   ;        D:\clone\LAB5\lab5v3.c:183: LCD_D4=ACC_4;
00EE A2E4       859            mov     c,_ACC_4
00F0 9293       860            mov     _P1_3,c
00F2            861   ;        D:\clone\LAB5\lab5v3.c:184: LCD_pulse();
00F2 C002       862            push    ar2
00F4 120000     863            lcall   _LCD_pulse
00F7            864   ;        D:\clone\LAB5\lab5v3.c:185: Timer3us(40);
00F7 758228     865            mov     dpl,#0x28
00FA 120000     866            lcall   _Timer3us
00FD D002       867            pop     ar2
00FF            868   ;        D:\clone\LAB5\lab5v3.c:186: ACC=x; //Send low nible
00FF 8AE0       869            mov     _ACC,r2
0101            870   ;        D:\clone\LAB5\lab5v3.c:187: LCD_D7=ACC_3;
0101 A2E3       871            mov     c,_ACC_3
0103 9290       872            mov     _P1_0,c
0105            873   ;        D:\clone\LAB5\lab5v3.c:188: LCD_D6=ACC_2;
0105 A2E2       874            mov     c,_ACC_2
0107 9291       875            mov     _P1_1,c
0109            876   ;        D:\clone\LAB5\lab5v3.c:189: LCD_D5=ACC_1;
0109 A2E1       877            mov     c,_ACC_1
010B 9292       878            mov     _P1_2,c
010D            879   ;        D:\clone\LAB5\lab5v3.c:190: LCD_D4=ACC_0;
010D A2E0       880            mov     c,_ACC_0
010F 9293       881            mov     _P1_3,c
0111            882   ;        D:\clone\LAB5\lab5v3.c:191: LCD_pulse();
0111 020000     883            ljmp    _LCD_pulse
0114            884   ;------------------------------------------------------------
0114            885   ;Allocation info for local variables in function 'WriteData'
0114            886   ;------------------------------------------------------------
0114            887   ;x                         Allocated to registers r2 
0114            888   ;------------------------------------------------------------
0114            889   ;        D:\clone\LAB5\lab5v3.c:194: void WriteData (unsigned char x)
0114            890   ;        -----------------------------------------
0114            891   ;         function WriteData
0114            892   ;        -----------------------------------------
0114            893   _WriteData:
0114 AA82       894            mov     r2,dpl
0116            895   ;        D:\clone\LAB5\lab5v3.c:196: LCD_RS=1;
0116 D297       896            setb    _P1_7
0118            897   ;        D:\clone\LAB5\lab5v3.c:197: LCD_byte(x);
0118 8A82       898            mov     dpl,r2
011A 120000     899            lcall   _LCD_byte
011D            900   ;        D:\clone\LAB5\lab5v3.c:198: waitms(2);
011D 900002     901            mov     dptr,#0x0002
0120 020000     902            ljmp    _waitms
0123            903   ;------------------------------------------------------------
0123            904   ;Allocation info for local variables in function 'WriteCommand'
0123            905   ;------------------------------------------------------------
0123            906   ;x                         Allocated to registers r2 
0123            907   ;------------------------------------------------------------
0123            908   ;        D:\clone\LAB5\lab5v3.c:201: void WriteCommand (unsigned char x)
0123            909   ;        -----------------------------------------
0123            910   ;         function WriteCommand
0123            911   ;        -----------------------------------------
0123            912   _WriteCommand:
0123 AA82       913            mov     r2,dpl
0125            914   ;        D:\clone\LAB5\lab5v3.c:203: LCD_RS=0;
0125 C297       915            clr     _P1_7
0127            916   ;        D:\clone\LAB5\lab5v3.c:204: LCD_byte(x);
0127 8A82       917            mov     dpl,r2
0129 120000     918            lcall   _LCD_byte
012C            919   ;        D:\clone\LAB5\lab5v3.c:205: waitms(5);
012C 900005     920            mov     dptr,#0x0005
012F 020000     921            ljmp    _waitms
0132            922   ;------------------------------------------------------------
0132            923   ;Allocation info for local variables in function 'LCD_4BIT'
0132            924   ;------------------------------------------------------------
0132            925   ;------------------------------------------------------------
0132            926   ;        D:\clone\LAB5\lab5v3.c:208: void LCD_4BIT (void)
0132            927   ;        -----------------------------------------
0132            928   ;         function LCD_4BIT
0132            929   ;        -----------------------------------------
0132            930   _LCD_4BIT:
0132            931   ;        D:\clone\LAB5\lab5v3.c:210: LCD_E=0; // Resting state of LCD's enable is zero
0132 C2A0       932            clr     _P2_0
0134            933   ;        D:\clone\LAB5\lab5v3.c:212: waitms(20);
0134 900014     934            mov     dptr,#0x0014
0137 120000     935            lcall   _waitms
013A            936   ;        D:\clone\LAB5\lab5v3.c:214: WriteCommand(0x33);
013A 758233     937            mov     dpl,#0x33
013D 120000     938            lcall   _WriteCommand
0140            939   ;        D:\clone\LAB5\lab5v3.c:215: WriteCommand(0x33);
0140 758233     940            mov     dpl,#0x33
0143 120000     941            lcall   _WriteCommand
0146            942   ;        D:\clone\LAB5\lab5v3.c:216: WriteCommand(0x32); // Change to 4-bit mode
0146 758232     943            mov     dpl,#0x32
0149 120000     944            lcall   _WriteCommand
014C            945   ;        D:\clone\LAB5\lab5v3.c:219: WriteCommand(0x28);
014C 758228     946            mov     dpl,#0x28
014F 120000     947            lcall   _WriteCommand
0152            948   ;        D:\clone\LAB5\lab5v3.c:220: WriteCommand(0x0c);
0152 75820C     949            mov     dpl,#0x0C
0155 120000     950            lcall   _WriteCommand
0158            951   ;        D:\clone\LAB5\lab5v3.c:221: WriteCommand(0x01); // Clear screen command (takes some time)
0158 758201     952            mov     dpl,#0x01
015B 120000     953            lcall   _WriteCommand
015E            954   ;        D:\clone\LAB5\lab5v3.c:222: waitms(20); // Wait for clear screen command to finsih.
015E 900014     955            mov     dptr,#0x0014
0161 020000     956            ljmp    _waitms
0164            957   ;------------------------------------------------------------
0164            958   ;Allocation info for local variables in function 'LCDprint'
0164            959   ;------------------------------------------------------------
0164            960   ;line                      Allocated with name '_LCDprint_PARM_2'
0164            961   ;string                    Allocated to registers r2 r3 r4 
0164            962   ;j                         Allocated to registers r5 r6 
0164            963   ;------------------------------------------------------------
0164            964   ;        D:\clone\LAB5\lab5v3.c:225: void LCDprint(char * string, unsigned char line, bit clear)
0164            965   ;        -----------------------------------------
0164            966   ;         function LCDprint
0164            967   ;        -----------------------------------------
0164            968   _LCDprint:
0164 AA82       969            mov     r2,dpl
0166 AB83       970            mov     r3,dph
0168 ACF0       971            mov     r4,b
016A            972   ;        D:\clone\LAB5\lab5v3.c:229: WriteCommand(line==2?0xc0:0x80);
016A 7402       973            mov     a,#0x02
016C B5F8A0     974            cjne    a,_LCDprint_PARM_2,L011013?
016F 7DC0       975            mov     r5,#0xC0
0171 8000       976            sjmp    L011014?
0173            977   L011013?:
0173 7D80       978            mov     r5,#0x80
0175            979   L011014?:
0175 8D82       980            mov     dpl,r5
0177 C002       981            push    ar2
0179 C003       982            push    ar3
017B C004       983            push    ar4
017D 120000     984            lcall   _WriteCommand
0180            985   ;        D:\clone\LAB5\lab5v3.c:230: waitms(5);
0180 900005     986            mov     dptr,#0x0005
0183 120000     987            lcall   _waitms
0186 D004       988            pop     ar4
0188 D003       989            pop     ar3
018A D002       990            pop     ar2
018C            991   ;        D:\clone\LAB5\lab5v3.c:231: for(j=0; string[j]!=0; j++) WriteData(string[j]);// Write the message
018C 7D00       992            mov     r5,#0x00
018E 7E00       993            mov     r6,#0x00
0190            994   L011003?:
0190 ED         995            mov     a,r5
0191 2A         996            add     a,r2
0192 FF         997            mov     r7,a
0193 EE         998            mov     a,r6
0194 3B         999            addc    a,r3
0195 F8        1000            mov     r0,a
0196 8C01      1001            mov     ar1,r4
0198 8F82      1002            mov     dpl,r7
019A 8883      1003            mov     dph,r0
019C 89F0      1004            mov     b,r1
019E 120000    1005            lcall   __gptrget
01A1 FF        1006            mov     r7,a
01A2 6000      1007            jz      L011006?
01A4 8F82      1008            mov     dpl,r7
01A6 C002      1009            push    ar2
01A8 C003      1010            push    ar3
01AA C004      1011            push    ar4
01AC C005      1012            push    ar5
01AE C006      1013            push    ar6
01B0 120000    1014            lcall   _WriteData
01B3 D006      1015            pop     ar6
01B5 D005      1016            pop     ar5
01B7 D004      1017            pop     ar4
01B9 D003      1018            pop     ar3
01BB D002      1019            pop     ar2
01BD 0D        1020            inc     r5
01BE BD0020    1021            cjne    r5,#0x00,L011003?
01C1 0E        1022            inc     r6
01C2 8000      1023            sjmp    L011003?
01C4           1024   L011006?:
01C4           1025   ;        D:\clone\LAB5\lab5v3.c:232: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
01C4 3068E0    1026            jnb     _LCDprint_PARM_3,L011011?
01C7 8D02      1027            mov     ar2,r5
01C9 8E03      1028            mov     ar3,r6
01CB           1029   L011007?:
01CB C3        1030            clr     c
01CC EA        1031            mov     a,r2
01CD 9410      1032            subb    a,#0x10
01CF EB        1033            mov     a,r3
01D0 6480      1034            xrl     a,#0x80
01D2 9480      1035            subb    a,#0x80
01D4 5000      1036            jnc     L011011?
01D6 758220    1037            mov     dpl,#0x20
01D9 C002      1038            push    ar2
01DB C003      1039            push    ar3
01DD 120000    1040            lcall   _WriteData
01E0 D003      1041            pop     ar3
01E2 D002      1042            pop     ar2
01E4 0A        1043            inc     r2
01E5 BA0020    1044            cjne    r2,#0x00,L011007?
01E8 0B        1045            inc     r3
01E9 8000      1046            sjmp    L011007?
01EB           1047   L011011?:
01EB 22        1048            ret
01EC           1049   ;------------------------------------------------------------
01EC           1050   ;Allocation info for local variables in function 'TIMER0_Init'
01EC           1051   ;------------------------------------------------------------
01EC           1052   ;------------------------------------------------------------
01EC           1053   ;        D:\clone\LAB5\lab5v3.c:235: void TIMER0_Init(void)
01EC           1054   ;        -----------------------------------------
01EC           1055   ;         function TIMER0_Init
01EC           1056   ;        -----------------------------------------
01EC           1057   _TIMER0_Init:
01EC           1058   ;        D:\clone\LAB5\lab5v3.c:237: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
01EC 5389F0    1059            anl     _TMOD,#0xF0
01EF           1060   ;        D:\clone\LAB5\lab5v3.c:238: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
01EF 438901    1061            orl     _TMOD,#0x01
01F2           1062   ;        D:\clone\LAB5\lab5v3.c:239: TR0=0; // Stop Timer/Counter 0
01F2 C28C      1063            clr     _TR0
01F4 22        1064            ret
01F5           1065   ;------------------------------------------------------------
01F5           1066   ;Allocation info for local variables in function 'InitPinADC'
01F5           1067   ;------------------------------------------------------------
01F5           1068   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
01F5           1069   ;portno                    Allocated to registers r2 
01F5           1070   ;mask                      Allocated to registers r3 
01F5           1071   ;------------------------------------------------------------
01F5           1072   ;        D:\clone\LAB5\lab5v3.c:244: void InitPinADC (unsigned char portno, unsigned char pinno)
01F5           1073   ;        -----------------------------------------
01F5           1074   ;         function InitPinADC
01F5           1075   ;        -----------------------------------------
01F5           1076   _InitPinADC:
01F5 AA82      1077            mov     r2,dpl
01F7           1078   ;        D:\clone\LAB5\lab5v3.c:248: mask=1<<pinno;
01F7 85C8F0    1079            mov     b,_InitPinADC_PARM_2
01FA 05F0      1080            inc     b
01FC 7401      1081            mov     a,#0x01
01FE 8000      1082            sjmp    L013013?
0200           1083   L013011?:
0200 25E0      1084            add     a,acc
0202           1085   L013013?:
0202 D5F0A0    1086            djnz    b,L013011?
0205 FB        1087            mov     r3,a
0206           1088   ;        D:\clone\LAB5\lab5v3.c:250: SFRPAGE = 0x20;
0206 75A720    1089            mov     _SFRPAGE,#0x20
0209           1090   ;        D:\clone\LAB5\lab5v3.c:251: switch (portno)
0209 BA00E0    1091            cjne    r2,#0x00,L013014?
020C 8000      1092            sjmp    L013001?
020E           1093   L013014?:
020E BA0160    1094            cjne    r2,#0x01,L013015?
0211 8000      1095            sjmp    L013002?
0213           1096   L013015?:
0213           1097   ;        D:\clone\LAB5\lab5v3.c:253: case 0:
0213 BA02E0    1098            cjne    r2,#0x02,L013005?
0216 8000      1099            sjmp    L013003?
0218           1100   L013001?:
0218           1101   ;        D:\clone\LAB5\lab5v3.c:254: P0MDIN &= (~mask); // Set pin as analog input
0218 EB        1102            mov     a,r3
0219 F4        1103            cpl     a
021A FA        1104            mov     r2,a
021B 52F1      1105            anl     _P0MDIN,a
021D           1106   ;        D:\clone\LAB5\lab5v3.c:255: P0SKIP |= mask; // Skip Crossbar decoding for this pin
021D EB        1107            mov     a,r3
021E 42D4      1108            orl     _P0SKIP,a
0220           1109   ;        D:\clone\LAB5\lab5v3.c:256: break;
0220           1110   ;        D:\clone\LAB5\lab5v3.c:257: case 1:
0220 8000      1111            sjmp    L013005?
0222           1112   L013002?:
0222           1113   ;        D:\clone\LAB5\lab5v3.c:258: P1MDIN &= (~mask); // Set pin as analog input
0222 EB        1114            mov     a,r3
0223 F4        1115            cpl     a
0224 FA        1116            mov     r2,a
0225 52F2      1117            anl     _P1MDIN,a
0227           1118   ;        D:\clone\LAB5\lab5v3.c:259: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0227 EB        1119            mov     a,r3
0228 42D5      1120            orl     _P1SKIP,a
022A           1121   ;        D:\clone\LAB5\lab5v3.c:260: break;
022A           1122   ;        D:\clone\LAB5\lab5v3.c:261: case 2:
022A 8000      1123            sjmp    L013005?
022C           1124   L013003?:
022C           1125   ;        D:\clone\LAB5\lab5v3.c:262: P2MDIN &= (~mask); // Set pin as analog input
022C EB        1126            mov     a,r3
022D F4        1127            cpl     a
022E FA        1128            mov     r2,a
022F 52F3      1129            anl     _P2MDIN,a
0231           1130   ;        D:\clone\LAB5\lab5v3.c:263: P2SKIP |= mask; // Skip Crossbar decoding for this pin
0231 EB        1131            mov     a,r3
0232 42CC      1132            orl     _P2SKIP,a
0234           1133   ;        D:\clone\LAB5\lab5v3.c:267: }
0234           1134   L013005?:
0234           1135   ;        D:\clone\LAB5\lab5v3.c:268: SFRPAGE = 0x00;
0234 75A700    1136            mov     _SFRPAGE,#0x00
0237 22        1137            ret
0238           1138   ;------------------------------------------------------------
0238           1139   ;Allocation info for local variables in function 'ADC_at_Pin'
0238           1140   ;------------------------------------------------------------
0238           1141   ;pin                       Allocated to registers 
0238           1142   ;------------------------------------------------------------
0238           1143   ;        D:\clone\LAB5\lab5v3.c:272: unsigned int ADC_at_Pin(unsigned char pin)
0238           1144   ;        -----------------------------------------
0238           1145   ;         function ADC_at_Pin
0238           1146   ;        -----------------------------------------
0238           1147   _ADC_at_Pin:
0238 8582BB    1148            mov     _ADC0MX,dpl
023B           1149   ;        D:\clone\LAB5\lab5v3.c:275: ADINT = 0;
023B C2ED      1150            clr     _ADINT
023D           1151   ;        D:\clone\LAB5\lab5v3.c:276: ADBUSY = 1;     // Convert voltage at the pin
023D D2EC      1152            setb    _ADBUSY
023F           1153   ;        D:\clone\LAB5\lab5v3.c:277: while (!ADINT); // Wait for conversion to complete
023F           1154   L014001?:
023F 30ED60    1155            jnb     _ADINT,L014001?
0242           1156   ;        D:\clone\LAB5\lab5v3.c:278: return (ADC0);
0242 85BD82    1157            mov     dpl,_ADC0
0245 85BE83    1158            mov     dph,(_ADC0 >> 8)
0248 22        1159            ret
0249           1160   ;------------------------------------------------------------
0249           1161   ;Allocation info for local variables in function 'Volts_at_Pin'
0249           1162   ;------------------------------------------------------------
0249           1163   ;pin                       Allocated to registers r2 
0249           1164   ;------------------------------------------------------------
0249           1165   ;        D:\clone\LAB5\lab5v3.c:281: float Volts_at_Pin(unsigned char pin)
0249           1166   ;        -----------------------------------------
0249           1167   ;         function Volts_at_Pin
0249           1168   ;        -----------------------------------------
0249           1169   _Volts_at_Pin:
0249           1170   ;        D:\clone\LAB5\lab5v3.c:283: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
0249 120000    1171            lcall   _ADC_at_Pin
024C 120000    1172            lcall   ___uint2fs
024F AA82      1173            mov     r2,dpl
0251 AB83      1174            mov     r3,dph
0253 ACF0      1175            mov     r4,b
0255 FD        1176            mov     r5,a
0256 C002      1177            push    ar2
0258 C003      1178            push    ar3
025A C004      1179            push    ar4
025C C005      1180            push    ar5
025E 90923A    1181            mov     dptr,#0x923A
0261 75F053    1182            mov     b,#0x53
0264 7440      1183            mov     a,#0x40
0266 120000    1184            lcall   ___fsmul
0269 AA82      1185            mov     r2,dpl
026B AB83      1186            mov     r3,dph
026D ACF0      1187            mov     r4,b
026F FD        1188            mov     r5,a
0270 E581      1189            mov     a,sp
0272 24FC      1190            add     a,#0xfc
0274 F581      1191            mov     sp,a
0276 E4        1192            clr     a
0277 C0E0      1193            push    acc
0279 74FC      1194            mov     a,#0xFC
027B C0E0      1195            push    acc
027D 747F      1196            mov     a,#0x7F
027F C0E0      1197            push    acc
0281 7446      1198            mov     a,#0x46
0283 C0E0      1199            push    acc
0285 8A82      1200            mov     dpl,r2
0287 8B83      1201            mov     dph,r3
0289 8CF0      1202            mov     b,r4
028B ED        1203            mov     a,r5
028C 120000    1204            lcall   ___fsdiv
028F AA82      1205            mov     r2,dpl
0291 AB83      1206            mov     r3,dph
0293 ACF0      1207            mov     r4,b
0295 FD        1208            mov     r5,a
0296 E581      1209            mov     a,sp
0298 24FC      1210            add     a,#0xfc
029A F581      1211            mov     sp,a
029C 8A82      1212            mov     dpl,r2
029E 8B83      1213            mov     dph,r3
02A0 8CF0      1214            mov     b,r4
02A2 ED        1215            mov     a,r5
02A3 22        1216            ret
02A4           1217   ;------------------------------------------------------------
02A4           1218   ;Allocation info for local variables in function 'Get_ADC'
02A4           1219   ;------------------------------------------------------------
02A4           1220   ;------------------------------------------------------------
02A4           1221   ;        D:\clone\LAB5\lab5v3.c:286: unsigned int Get_ADC (void)
02A4           1222   ;        -----------------------------------------
02A4           1223   ;         function Get_ADC
02A4           1224   ;        -----------------------------------------
02A4           1225   _Get_ADC:
02A4           1226   ;        D:\clone\LAB5\lab5v3.c:288: ADINT = 0;
02A4 C2ED      1227            clr     _ADINT
02A6           1228   ;        D:\clone\LAB5\lab5v3.c:289: ADBUSY = 1;
02A6 D2EC      1229            setb    _ADBUSY
02A8           1230   ;        D:\clone\LAB5\lab5v3.c:290: while (!ADINT); // Wait for conversion to complete
02A8           1231   L016001?:
02A8 30EDA0    1232            jnb     _ADINT,L016001?
02AB           1233   ;        D:\clone\LAB5\lab5v3.c:291: return (ADC0);
02AB 85BD82    1234            mov     dpl,_ADC0
02AE 85BE83    1235            mov     dph,(_ADC0 >> 8)
02B1 22        1236            ret
02B2           1237   ;------------------------------------------------------------
02B2           1238   ;Allocation info for local variables in function 'getsn'
02B2           1239   ;------------------------------------------------------------
02B2           1240   ;len                       Allocated with name '_getsn_PARM_2'
02B2           1241   ;buff                      Allocated with name '_getsn_buff_1_96'
02B2           1242   ;j                         Allocated with name '_getsn_sloc0_1_0'
02B2           1243   ;c                         Allocated to registers r3 
02B2           1244   ;sloc0                     Allocated with name '_getsn_sloc0_1_0'
02B2           1245   ;------------------------------------------------------------
02B2           1246   ;        D:\clone\LAB5\lab5v3.c:294: int getsn (char * buff, int len)
02B2           1247   ;        -----------------------------------------
02B2           1248   ;         function getsn
02B2           1249   ;        -----------------------------------------
02B2           1250   _getsn:
02B2 858290    1251            mov     _getsn_buff_1_96,dpl
02B5 858391    1252            mov     (_getsn_buff_1_96 + 1),dph
02B8 85F092    1253            mov     (_getsn_buff_1_96 + 2),b
02BB           1254   ;        D:\clone\LAB5\lab5v3.c:299: for(j=0; j<(len-1); j++)
02BB E4        1255            clr     a
02BC F5E0      1256            mov     _getsn_sloc0_1_0,a
02BE F5E1      1257            mov     (_getsn_sloc0_1_0 + 1),a
02C0 E5A8      1258            mov     a,_getsn_PARM_2
02C2 24FF      1259            add     a,#0xff
02C4 FF        1260            mov     r7,a
02C5 E5A9      1261            mov     a,(_getsn_PARM_2 + 1)
02C7 34FF      1262            addc    a,#0xff
02C9 F8        1263            mov     r0,a
02CA 7900      1264            mov     r1,#0x00
02CC 7A00      1265            mov     r2,#0x00
02CE           1266   L017005?:
02CE C3        1267            clr     c
02CF E9        1268            mov     a,r1
02D0 9F        1269            subb    a,r7
02D1 EA        1270            mov     a,r2
02D2 6480      1271            xrl     a,#0x80
02D4 88F0      1272            mov     b,r0
02D6 63F080    1273            xrl     b,#0x80
02D9 95F0      1274            subb    a,b
02DB 5000      1275            jnc     L017008?
02DD           1276   ;        D:\clone\LAB5\lab5v3.c:301: c=getchar();
02DD C002      1277            push    ar2
02DF C007      1278            push    ar7
02E1 C000      1279            push    ar0
02E3 C001      1280            push    ar1
02E5 120000    1281            lcall   _getchar
02E8 AB82      1282            mov     r3,dpl
02EA D001      1283            pop     ar1
02EC D000      1284            pop     ar0
02EE D007      1285            pop     ar7
02F0 D002      1286            pop     ar2
02F2           1287   ;        D:\clone\LAB5\lab5v3.c:302: if ( (c=='\n') || (c=='\r') )
02F2 BB0AA8    1288            cjne    r3,#0x0A,L017015?
02F5 8000      1289            sjmp    L017001?
02F7           1290   L017015?:
02F7 BB0D28    1291            cjne    r3,#0x0D,L017002?
02FA           1292   L017001?:
02FA           1293   ;        D:\clone\LAB5\lab5v3.c:304: buff[j]=0;
02FA E5E0      1294            mov     a,_getsn_sloc0_1_0
02FC 2590      1295            add     a,_getsn_buff_1_96
02FE FC        1296            mov     r4,a
02FF E5E1      1297            mov     a,(_getsn_sloc0_1_0 + 1)
0301 3591      1298            addc    a,(_getsn_buff_1_96 + 1)
0303 FD        1299            mov     r5,a
0304 AE92      1300            mov     r6,(_getsn_buff_1_96 + 2)
0306 8C82      1301            mov     dpl,r4
0308 8D83      1302            mov     dph,r5
030A 8EF0      1303            mov     b,r6
030C E4        1304            clr     a
030D 120000    1305            lcall   __gptrput
0310           1306   ;        D:\clone\LAB5\lab5v3.c:305: return j;
0310 85E082    1307            mov     dpl,_getsn_sloc0_1_0
0313 85E183    1308            mov     dph,(_getsn_sloc0_1_0 + 1)
0316 22        1309            ret
0317           1310   L017002?:
0317           1311   ;        D:\clone\LAB5\lab5v3.c:309: buff[j]=c;
0317 E9        1312            mov     a,r1
0318 2590      1313            add     a,_getsn_buff_1_96
031A FC        1314            mov     r4,a
031B EA        1315            mov     a,r2
031C 3591      1316            addc    a,(_getsn_buff_1_96 + 1)
031E FD        1317            mov     r5,a
031F AE92      1318            mov     r6,(_getsn_buff_1_96 + 2)
0321 8C82      1319            mov     dpl,r4
0323 8D83      1320            mov     dph,r5
0325 8EF0      1321            mov     b,r6
0327 EB        1322            mov     a,r3
0328 120000    1323            lcall   __gptrput
032B           1324   ;        D:\clone\LAB5\lab5v3.c:299: for(j=0; j<(len-1); j++)
032B 09        1325            inc     r1
032C B900A8    1326            cjne    r1,#0x00,L017018?
032F 0A        1327            inc     r2
0330           1328   L017018?:
0330 89E0      1329            mov     _getsn_sloc0_1_0,r1
0332 8AE1      1330            mov     (_getsn_sloc0_1_0 + 1),r2
0334 8000      1331            sjmp    L017005?
0336           1332   L017008?:
0336           1333   ;        D:\clone\LAB5\lab5v3.c:312: buff[j]=0;
0336 E5E0      1334            mov     a,_getsn_sloc0_1_0
0338 2590      1335            add     a,_getsn_buff_1_96
033A FA        1336            mov     r2,a
033B E5E1      1337            mov     a,(_getsn_sloc0_1_0 + 1)
033D 3591      1338            addc    a,(_getsn_buff_1_96 + 1)
033F FB        1339            mov     r3,a
0340 AC92      1340            mov     r4,(_getsn_buff_1_96 + 2)
0342 8A82      1341            mov     dpl,r2
0344 8B83      1342            mov     dph,r3
0346 8CF0      1343            mov     b,r4
0348 E4        1344            clr     a
0349 120000    1345            lcall   __gptrput
034C           1346   ;        D:\clone\LAB5\lab5v3.c:313: return len;
034C 85A882    1347            mov     dpl,_getsn_PARM_2
034F 85A983    1348            mov     dph,(_getsn_PARM_2 + 1)
0352 22        1349            ret
0353           1350   ;------------------------------------------------------------
0353           1351   ;Allocation info for local variables in function 'main'
0353           1352   ;------------------------------------------------------------
0353           1353   ;num                       Allocated to registers r6 r7 
0353           1354   ;num0                      Allocated to registers 
0353           1355   ;num1                      Allocated with name '_main_num1_1_102'
0353           1356   ;num2                      Allocated with name '_main_num2_1_102'
0353           1357   ;period                    Allocated to registers r2 r3 r4 r5 
0353           1358   ;mst                       Allocated with name '_main_mst_1_102'
0353           1359   ;i                         Allocated with name '_main_i_1_102'
0353           1360   ;vmax1                     Allocated with name '_main_vmax1_1_102'
0353           1361   ;vmax2                     Allocated with name '_main_vmax2_1_102'
0353           1362   ;phase_diff                Allocated to registers r2 r3 r4 r5 
0353           1363   ;degrees                   Allocated with name '_main_degrees_1_102'
0353           1364   ;p_n                       Allocated with name '_main_p_n_1_102'
0353           1365   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0353           1366   ;v                         Allocated with name '_main_v_1_102'
0353           1367   ;buff1                     Allocated with name '_main_buff1_1_102'
0353           1368   ;buff2                     Allocated with name '_main_buff2_1_102'
0353           1369   ;buff0                     Allocated with name '_main_buff0_1_102'
0353           1370   ;------------------------------------------------------------
0353           1371   ;        D:\clone\LAB5\lab5v3.c:317: void main (void)
0353           1372   ;        -----------------------------------------
0353           1373   ;         function main
0353           1374   ;        -----------------------------------------
0353           1375   _main:
0353           1376   ;        D:\clone\LAB5\lab5v3.c:330: float mst = 0.0;
0353 75C000    1377            mov     _main_mst_1_102,#0x00
0356 75C100    1378            mov     (_main_mst_1_102 + 1),#0x00
0359 75C200    1379            mov     (_main_mst_1_102 + 2),#0x00
035C 75C300    1380            mov     (_main_mst_1_102 + 3),#0x00
035F           1381   ;        D:\clone\LAB5\lab5v3.c:332: float vmax1=0.0;
035F 755000    1382            mov     _main_vmax1_1_102,#0x00
0362 755100    1383            mov     (_main_vmax1_1_102 + 1),#0x00
0365 755200    1384            mov     (_main_vmax1_1_102 + 2),#0x00
0368 755300    1385            mov     (_main_vmax1_1_102 + 3),#0x00
036B           1386   ;        D:\clone\LAB5\lab5v3.c:333: float vmax2=0.0;
036B 75A000    1387            mov     _main_vmax2_1_102,#0x00
036E 75A100    1388            mov     (_main_vmax2_1_102 + 1),#0x00
0371 75A200    1389            mov     (_main_vmax2_1_102 + 2),#0x00
0374 75A300    1390            mov     (_main_vmax2_1_102 + 3),#0x00
0377           1391   ;        D:\clone\LAB5\lab5v3.c:338: TIMER0_Init();
0377 120000    1392            lcall   _TIMER0_Init
037A           1393   ;        D:\clone\LAB5\lab5v3.c:339: LCD_4BIT();
037A 120000    1394            lcall   _LCD_4BIT
037D           1395   ;        D:\clone\LAB5\lab5v3.c:341: LCDprint("Enter passcode: ", 1, 1);
037D 75F801    1396            mov     _LCDprint_PARM_2,#0x01
0380 D268      1397            setb    _LCDprint_PARM_3
0382 90C1E8    1398            mov     dptr,#__str_0
0385 75F080    1399            mov     b,#0x80
0388 120000    1400            lcall   _LCDprint
038B           1401   ;        D:\clone\LAB5\lab5v3.c:342: LCDprint("                ", 2, 1);
038B 75F802    1402            mov     _LCDprint_PARM_2,#0x02
038E D268      1403            setb    _LCDprint_PARM_3
0390 90C228    1404            mov     dptr,#__str_1
0393 75F080    1405            mov     b,#0x80
0396 120000    1406            lcall   _LCDprint
0399           1407   ;        D:\clone\LAB5\lab5v3.c:344: while(state==0)
0399           1408   L018007?:
0399 E578      1409            mov     a,_state
039B 4579      1410            orl     a,(_state + 1)
039D 6000      1411            jz      L018114?
039F 020000    1412            ljmp    L018009?
03A2           1413   L018114?:
03A2           1414   ;        D:\clone\LAB5\lab5v3.c:346: waitms(500); // Give PuTTY a chance to start.
03A2 9001F4    1415            mov     dptr,#0x01F4
03A5 120000    1416            lcall   _waitms
03A8           1417   ;        D:\clone\LAB5\lab5v3.c:347: printf("Type what you want to display in line 2 (16 char max): ");
03A8 7428      1418            mov     a,#__str_2
03AA C0E0      1419            push    acc
03AC 74C3      1420            mov     a,#(__str_2 >> 8)
03AE C0E0      1421            push    acc
03B0 7480      1422            mov     a,#0x80
03B2 C0E0      1423            push    acc
03B4 120000    1424            lcall   _printf
03B7 1581      1425            dec     sp
03B9 1581      1426            dec     sp
03BB 1581      1427            dec     sp
03BD           1428   ;        D:\clone\LAB5\lab5v3.c:348: getsn(buff0, sizeof(buff0));
03BD 75A811    1429            mov     _getsn_PARM_2,#0x11
03C0 E4        1430            clr     a
03C1 F5A9      1431            mov     (_getsn_PARM_2 + 1),a
03C3 90B6A0    1432            mov     dptr,#_main_buff0_1_102
03C6 75F040    1433            mov     b,#0x40
03C9 120000    1434            lcall   _getsn
03CC           1435   ;        D:\clone\LAB5\lab5v3.c:349: printf("\n");
03CC 74A8      1436            mov     a,#__str_3
03CE C0E0      1437            push    acc
03D0 74C3      1438            mov     a,#(__str_3 >> 8)
03D2 C0E0      1439            push    acc
03D4 7480      1440            mov     a,#0x80
03D6 C0E0      1441            push    acc
03D8 120000    1442            lcall   _printf
03DB 1581      1443            dec     sp
03DD 1581      1444            dec     sp
03DF 1581      1445            dec     sp
03E1           1446   ;        D:\clone\LAB5\lab5v3.c:350: LCDprint(buff0, 2, 1);
03E1 75F802    1447            mov     _LCDprint_PARM_2,#0x02
03E4 D268      1448            setb    _LCDprint_PARM_3
03E6 90B6A0    1449            mov     dptr,#_main_buff0_1_102
03E9 75F040    1450            mov     b,#0x40
03EC 120000    1451            lcall   _LCDprint
03EF           1452   ;        D:\clone\LAB5\lab5v3.c:351: waitms(500); // Give PuTTY a chance to start.
03EF 9001F4    1453            mov     dptr,#0x01F4
03F2 120000    1454            lcall   _waitms
03F5           1455   ;        D:\clone\LAB5\lab5v3.c:352: num0=buff0[0]-'0';
03F5 78A0      1456            mov     r0,#_main_buff0_1_102
03F7 E6        1457            mov     a,@r0
03F8 FE        1458            mov     r6,a
03F9 33        1459            rlc     a
03FA 95E0      1460            subb    a,acc
03FC FF        1461            mov     r7,a
03FD EE        1462            mov     a,r6
03FE 24D0      1463            add     a,#0xd0
0400 F500      1464            mov     __mulint_PARM_2,a
0402 EF        1465            mov     a,r7
0403 34FF      1466            addc    a,#0xff
0405 F501      1467            mov     (__mulint_PARM_2 + 1),a
0407           1468   ;        D:\clone\LAB5\lab5v3.c:353: num1=buff0[1]-'0';
0407 78A1      1469            mov     r0,#(_main_buff0_1_102 + 0x0001)
0409 E6        1470            mov     a,@r0
040A FE        1471            mov     r6,a
040B 33        1472            rlc     a
040C 95E0      1473            subb    a,acc
040E FF        1474            mov     r7,a
040F EE        1475            mov     a,r6
0410 24D0      1476            add     a,#0xd0
0412 F530      1477            mov     _main_num1_1_102,a
0414 EF        1478            mov     a,r7
0415 34FF      1479            addc    a,#0xff
0417 F531      1480            mov     (_main_num1_1_102 + 1),a
0419           1481   ;        D:\clone\LAB5\lab5v3.c:354: num2=buff0[2]-'0';
0419 78A2      1482            mov     r0,#(_main_buff0_1_102 + 0x0002)
041B E6        1483            mov     a,@r0
041C FE        1484            mov     r6,a
041D 33        1485            rlc     a
041E 95E0      1486            subb    a,acc
0420 FF        1487            mov     r7,a
0421 EE        1488            mov     a,r6
0422 24D0      1489            add     a,#0xd0
0424 F580      1490            mov     _main_num2_1_102,a
0426 EF        1491            mov     a,r7
0427 34FF      1492            addc    a,#0xff
0429 F581      1493            mov     (_main_num2_1_102 + 1),a
042B           1494   ;        D:\clone\LAB5\lab5v3.c:355: num=num0*100+num1*10+num2*1;
042B 900064    1495            mov     dptr,#0x0064
042E 120000    1496            lcall   __mulint
0431 AE82      1497            mov     r6,dpl
0433 AF83      1498            mov     r7,dph
0435 853000    1499            mov     __mulint_PARM_2,_main_num1_1_102
0438 853101    1500            mov     (__mulint_PARM_2 + 1),(_main_num1_1_102 + 1)
043B 90000A    1501            mov     dptr,#0x000A
043E C006      1502            push    ar6
0440 C007      1503            push    ar7
0442 120000    1504            lcall   __mulint
0445 AA82      1505            mov     r2,dpl
0447 AB83      1506            mov     r3,dph
0449 D007      1507            pop     ar7
044B D006      1508            pop     ar6
044D EA        1509            mov     a,r2
044E 2E        1510            add     a,r6
044F FE        1511            mov     r6,a
0450 EB        1512            mov     a,r3
0451 3F        1513            addc    a,r7
0452 FF        1514            mov     r7,a
0453 E580      1515            mov     a,_main_num2_1_102
0455 2E        1516            add     a,r6
0456 FE        1517            mov     r6,a
0457 E581      1518            mov     a,(_main_num2_1_102 + 1)
0459 3F        1519            addc    a,r7
045A FF        1520            mov     r7,a
045B           1521   ;        D:\clone\LAB5\lab5v3.c:356: if(num==passcode)
045B EE        1522            mov     a,r6
045C B5F868    1523            cjne    a,_passcode,L018005?
045F EF        1524            mov     a,r7
0460 B5F968    1525            cjne    a,(_passcode + 1),L018005?
0463           1526   ;        D:\clone\LAB5\lab5v3.c:358: state= UNLOCK;
0463 757801    1527            mov     _state,#0x01
0466 E4        1528            clr     a
0467 F579      1529            mov     (_state + 1),a
0469           1530   ;        D:\clone\LAB5\lab5v3.c:359: flag1=1;
0469 757801    1531            mov     _flag1,#0x01
046C E4        1532            clr     a
046D F579      1533            mov     (_flag1 + 1),a
046F           1534   ;        D:\clone\LAB5\lab5v3.c:360: attempt=0;
046F E4        1535            clr     a
0470 F5B8      1536            mov     _attempt,a
0472 F5B9      1537            mov     (_attempt + 1),a
0474 020000    1538            ljmp    L018007?
0477           1539   L018005?:
0477           1540   ;        D:\clone\LAB5\lab5v3.c:364: LCDprint("Wrong Passcode", 1, 1); 
0477 75F801    1541            mov     _LCDprint_PARM_2,#0x01
047A D268      1542            setb    _LCDprint_PARM_3
047C 90C4A8    1543            mov     dptr,#__str_4
047F 75F080    1544            mov     b,#0x80
0482 120000    1545            lcall   _LCDprint
0485           1546   ;        D:\clone\LAB5\lab5v3.c:365: state= LOCK;  
0485 E4        1547            clr     a
0486 F578      1548            mov     _state,a
0488 F579      1549            mov     (_state + 1),a
048A           1550   ;        D:\clone\LAB5\lab5v3.c:366: attempt++;
048A 05B8      1551            inc     _attempt
048C E4        1552            clr     a
048D B5B8E8    1553            cjne    a,_attempt,L018117?
0490 05B9      1554            inc     (_attempt + 1)
0492           1555   L018117?:
0492           1556   ;        D:\clone\LAB5\lab5v3.c:367: if(attempt==3)
0492 7403      1557            mov     a,#0x03
0494 B5B828    1558            cjne    a,_attempt,L018118?
0497 E4        1559            clr     a
0498 B5B928    1560            cjne    a,(_attempt + 1),L018118?
049B 8000      1561            sjmp    L018119?
049D           1562   L018118?:
049D 8000      1563            sjmp    L018002?
049F           1564   L018119?:
049F           1565   ;        D:\clone\LAB5\lab5v3.c:369: LCDprint("Attempts Over ", 1, 1);
049F 75F801    1566            mov     _LCDprint_PARM_2,#0x01
04A2 D268      1567            setb    _LCDprint_PARM_3
04A4 90C5E8    1568            mov     dptr,#__str_5
04A7 75F080    1569            mov     b,#0x80
04AA 120000    1570            lcall   _LCDprint
04AD           1571   ;        D:\clone\LAB5\lab5v3.c:370: LCDprint("System Hang", 2, 1);
04AD 75F802    1572            mov     _LCDprint_PARM_2,#0x02
04B0 D268      1573            setb    _LCDprint_PARM_3
04B2 90C628    1574            mov     dptr,#__str_6
04B5 75F080    1575            mov     b,#0x80
04B8 120000    1576            lcall   _LCDprint
04BB           1577   ;        D:\clone\LAB5\lab5v3.c:371: flag2=1;
04BB 753801    1578            mov     _flag2,#0x01
04BE E4        1579            clr     a
04BF F539      1580            mov     (_flag2 + 1),a
04C1           1581   ;        D:\clone\LAB5\lab5v3.c:372: state= UNLOCK;
04C1 757801    1582            mov     _state,#0x01
04C4 E4        1583            clr     a
04C5 F579      1584            mov     (_state + 1),a
04C7 020000    1585            ljmp    L018007?
04CA           1586   L018002?:
04CA           1587   ;        D:\clone\LAB5\lab5v3.c:376: LCDprint("Try Again", 1, 1);
04CA 75F801    1588            mov     _LCDprint_PARM_2,#0x01
04CD D268      1589            setb    _LCDprint_PARM_3
04CF 90C668    1590            mov     dptr,#__str_7
04D2 75F080    1591            mov     b,#0x80
04D5 120000    1592            lcall   _LCDprint
04D8 020000    1593            ljmp    L018007?
04DB           1594   L018009?:
04DB           1595   ;        D:\clone\LAB5\lab5v3.c:381: if(flag2==1) goto infinit;
04DB 7401      1596            mov     a,#0x01
04DD B538A8    1597            cjne    a,_flag2,L018120?
04E0 E4        1598            clr     a
04E1 B539A8    1599            cjne    a,(_flag2 + 1),L018120?
04E4 020000    1600            ljmp    L018065?
04E7           1601   L018120?:
04E7           1602   ;        D:\clone\LAB5\lab5v3.c:386: waitms(500); // Give PuTTy a chance to start before sending
04E7 9001F4    1603            mov     dptr,#0x01F4
04EA 120000    1604            lcall   _waitms
04ED           1605   ;        D:\clone\LAB5\lab5v3.c:387: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
04ED 7428      1606            mov     a,#__str_8
04EF C0E0      1607            push    acc
04F1 74C7      1608            mov     a,#(__str_8 >> 8)
04F3 C0E0      1609            push    acc
04F5 7480      1610            mov     a,#0x80
04F7 C0E0      1611            push    acc
04F9 120000    1612            lcall   _printf
04FC 1581      1613            dec     sp
04FE 1581      1614            dec     sp
0500 1581      1615            dec     sp
0502           1616   ;        D:\clone\LAB5\lab5v3.c:392: __FILE__, __DATE__, __TIME__);
0502           1617   ;        D:\clone\LAB5\lab5v3.c:391: "Compiled: %s, %s\n\n",
0502 7468      1618            mov     a,#__str_12
0504 C0E0      1619            push    acc
0506 74C7      1620            mov     a,#(__str_12 >> 8)
0508 C0E0      1621            push    acc
050A 7480      1622            mov     a,#0x80
050C C0E0      1623            push    acc
050E 74A8      1624            mov     a,#__str_11
0510 C0E0      1625            push    acc
0512 74C7      1626            mov     a,#(__str_11 >> 8)
0514 C0E0      1627            push    acc
0516 7480      1628            mov     a,#0x80
0518 C0E0      1629            push    acc
051A 74E8      1630            mov     a,#__str_10
051C C0E0      1631            push    acc
051E 74C7      1632            mov     a,#(__str_10 >> 8)
0520 C0E0      1633            push    acc
0522 7480      1634            mov     a,#0x80
0524 C0E0      1635            push    acc
0526 7428      1636            mov     a,#__str_9
0528 C0E0      1637            push    acc
052A 74C8      1638            mov     a,#(__str_9 >> 8)
052C C0E0      1639            push    acc
052E 7480      1640            mov     a,#0x80
0530 C0E0      1641            push    acc
0532 120000    1642            lcall   _printf
0535 E581      1643            mov     a,sp
0537 24F4      1644            add     a,#0xf4
0539 F581      1645            mov     sp,a
053B           1646   ;        D:\clone\LAB5\lab5v3.c:394: InitPinADC(1, 4); // Configure P1.6 as analog input
053B 75C804    1647            mov     _InitPinADC_PARM_2,#0x04
053E 758201    1648            mov     dpl,#0x01
0541 120000    1649            lcall   _InitPinADC
0544           1650   ;        D:\clone\LAB5\lab5v3.c:395: InitPinADC(1, 5); // Configure P1.7 as analog input
0544 75C805    1651            mov     _InitPinADC_PARM_2,#0x05
0547 758201    1652            mov     dpl,#0x01
054A 120000    1653            lcall   _InitPinADC
054D           1654   ;        D:\clone\LAB5\lab5v3.c:397: InitADC();
054D 120000    1655            lcall   _InitADC
0550           1656   ;        D:\clone\LAB5\lab5v3.c:400: while(flag1){
0550           1657   L018060?:
0550 E578      1658            mov     a,_flag1
0552 4579      1659            orl     a,(_flag1 + 1)
0554 7000      1660            jnz     L018121?
0556 020000    1661            ljmp    L018065?
0559           1662   L018121?:
0559           1663   ;        D:\clone\LAB5\lab5v3.c:401: for (i = 0; i < 10; i++){
0559 E4        1664            clr     a
055A F500      1665            mov     _main_i_1_102,a
055C F501      1666            mov     (_main_i_1_102 + 1),a
055E           1667   L018067?:
055E C3        1668            clr     c
055F E500      1669            mov     a,_main_i_1_102
0561 940A      1670            subb    a,#0x0A
0563 E501      1671            mov     a,(_main_i_1_102 + 1)
0565 6480      1672            xrl     a,#0x80
0567 9480      1673            subb    a,#0x80
0569 4000      1674            jc      L018122?
056B 020000    1675            ljmp    L018070?
056E           1676   L018122?:
056E           1677   ;        D:\clone\LAB5\lab5v3.c:403: TL0=0; 
056E 758A00    1678            mov     _TL0,#0x00
0571           1679   ;        D:\clone\LAB5\lab5v3.c:404: TH0=0;
0571 758C00    1680            mov     _TH0,#0x00
0574           1681   ;        D:\clone\LAB5\lab5v3.c:405: TF0=0;
0574 C28D      1682            clr     _TF0
0576           1683   ;        D:\clone\LAB5\lab5v3.c:406: overflow_count=0;
0576 753800    1684            mov     _overflow_count,#0x00
0579           1685   ;        D:\clone\LAB5\lab5v3.c:407: while(P0_1!=0); // Wait for the signal to be zero
0579           1686   L018014?:
0579 2081A8    1687            jb      _P0_1,L018014?
057C           1688   ;        D:\clone\LAB5\lab5v3.c:408: while(P0_1!=1); // Wait for the signal to be one
057C           1689   L018017?:
057C 3081E8    1690            jnb     _P0_1,L018017?
057F           1691   ;        D:\clone\LAB5\lab5v3.c:409: TR0=1; // Start the timer
057F D28C      1692            setb    _TR0
0581           1693   ;        D:\clone\LAB5\lab5v3.c:410: while(P0_1!=0) // Wait for the signal to be zero
0581           1694   L018022?:
0581 308168    1695            jnb     _P0_1,L018027?
0584           1696   ;        D:\clone\LAB5\lab5v3.c:412: if(TF0==1) // Did the 16-bit timer overflow?
0584           1697   ;        D:\clone\LAB5\lab5v3.c:414: TF0=0;
0584 108DA8    1698            jbc     _TF0,L018126?
0587 8000      1699            sjmp    L018022?
0589           1700   L018126?:
0589           1701   ;        D:\clone\LAB5\lab5v3.c:415: overflow_count++;
0589 0538      1702            inc     _overflow_count
058B           1703   ;        D:\clone\LAB5\lab5v3.c:418: while(P0_1!=1) // Wait for the signal to be one
058B 8000      1704            sjmp    L018022?
058D           1705   L018027?:
058D 2081E8    1706            jb      _P0_1,L018029?
0590           1707   ;        D:\clone\LAB5\lab5v3.c:420: if(TF0==1) // Did the 16-bit timer overflow?
0590           1708   ;        D:\clone\LAB5\lab5v3.c:422: TF0=0;
0590 108D28    1709            jbc     _TF0,L018128?
0593 8000      1710            sjmp    L018027?
0595           1711   L018128?:
0595           1712   ;        D:\clone\LAB5\lab5v3.c:423: overflow_count++;
0595 0538      1713            inc     _overflow_count
0597 8000      1714            sjmp    L018027?
0599           1715   L018029?:
0599           1716   ;        D:\clone\LAB5\lab5v3.c:426: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
0599 C28C      1717            clr     _TR0
059B           1718   ;        D:\clone\LAB5\lab5v3.c:427: period=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
059B 853882    1719            mov     dpl,_overflow_count
059E 120000    1720            lcall   ___uchar2fs
05A1 AC82      1721            mov     r4,dpl
05A3 AD83      1722            mov     r5,dph
05A5 AEF0      1723            mov     r6,b
05A7 FF        1724            mov     r7,a
05A8 C004      1725            push    ar4
05AA C005      1726            push    ar5
05AC C006      1727            push    ar6
05AE C007      1728            push    ar7
05B0 900000    1729            mov     dptr,#0x0000
05B3 75F080    1730            mov     b,#0x80
05B6 7447      1731            mov     a,#0x47
05B8 120000    1732            lcall   ___fsmul
05BB 858270    1733            mov     _main_sloc0_1_0,dpl
05BE 858371    1734            mov     (_main_sloc0_1_0 + 1),dph
05C1 85F072    1735            mov     (_main_sloc0_1_0 + 2),b
05C4 F573      1736            mov     (_main_sloc0_1_0 + 3),a
05C6 E581      1737            mov     a,sp
05C8 24FC      1738            add     a,#0xfc
05CA F581      1739            mov     sp,a
05CC 858C82    1740            mov     dpl,_TH0
05CF 120000    1741            lcall   ___uchar2fs
05D2 AA82      1742            mov     r2,dpl
05D4 AB83      1743            mov     r3,dph
05D6 ACF0      1744            mov     r4,b
05D8 FD        1745            mov     r5,a
05D9 C002      1746            push    ar2
05DB C003      1747            push    ar3
05DD C004      1748            push    ar4
05DF C005      1749            push    ar5
05E1 900000    1750            mov     dptr,#0x0000
05E4 75F080    1751            mov     b,#0x80
05E7 7443      1752            mov     a,#0x43
05E9 120000    1753            lcall   ___fsmul
05EC AA82      1754            mov     r2,dpl
05EE AB83      1755            mov     r3,dph
05F0 ACF0      1756            mov     r4,b
05F2 FD        1757            mov     r5,a
05F3 E581      1758            mov     a,sp
05F5 24FC      1759            add     a,#0xfc
05F7 F581      1760            mov     sp,a
05F9 C002      1761            push    ar2
05FB C003      1762            push    ar3
05FD C004      1763            push    ar4
05FF C005      1764            push    ar5
0601 857082    1765            mov     dpl,_main_sloc0_1_0
0604 857183    1766            mov     dph,(_main_sloc0_1_0 + 1)
0607 8572F0    1767            mov     b,(_main_sloc0_1_0 + 2)
060A E573      1768            mov     a,(_main_sloc0_1_0 + 3)
060C 120000    1769            lcall   ___fsadd
060F 858270    1770            mov     _main_sloc0_1_0,dpl
0612 858371    1771            mov     (_main_sloc0_1_0 + 1),dph
0615 85F072    1772            mov     (_main_sloc0_1_0 + 2),b
0618 F573      1773            mov     (_main_sloc0_1_0 + 3),a
061A E581      1774            mov     a,sp
061C 24FC      1775            add     a,#0xfc
061E F581      1776            mov     sp,a
0620 AE8A      1777            mov     r6,_TL0
0622 7F00      1778            mov     r7,#0x00
0624 8E82      1779            mov     dpl,r6
0626 8F83      1780            mov     dph,r7
0628 120000    1781            lcall   ___sint2fs
062B AE82      1782            mov     r6,dpl
062D AF83      1783            mov     r7,dph
062F AAF0      1784            mov     r2,b
0631 FB        1785            mov     r3,a
0632 C006      1786            push    ar6
0634 C007      1787            push    ar7
0636 C002      1788            push    ar2
0638 C003      1789            push    ar3
063A 857082    1790            mov     dpl,_main_sloc0_1_0
063D 857183    1791            mov     dph,(_main_sloc0_1_0 + 1)
0640 8572F0    1792            mov     b,(_main_sloc0_1_0 + 2)
0643 E573      1793            mov     a,(_main_sloc0_1_0 + 3)
0645 120000    1794            lcall   ___fsadd
0648 AA82      1795            mov     r2,dpl
064A AB83      1796            mov     r3,dph
064C ACF0      1797            mov     r4,b
064E FD        1798            mov     r5,a
064F E581      1799            mov     a,sp
0651 24FC      1800            add     a,#0xfc
0653 F581      1801            mov     sp,a
0655 C002      1802            push    ar2
0657 C003      1803            push    ar3
0659 C004      1804            push    ar4
065B C005      1805            push    ar5
065D 90F4FC    1806            mov     dptr,#0xF4FC
0660 75F032    1807            mov     b,#0x32
0663 7434      1808            mov     a,#0x34
0665 120000    1809            lcall   ___fsmul
0668 AA82      1810            mov     r2,dpl
066A AB83      1811            mov     r3,dph
066C ACF0      1812            mov     r4,b
066E FD        1813            mov     r5,a
066F E581      1814            mov     a,sp
0671 24FC      1815            add     a,#0xfc
0673 F581      1816            mov     sp,a
0675           1817   ;        D:\clone\LAB5\lab5v3.c:428: if (period > mst){
0675 C002      1818            push    ar2
0677 C003      1819            push    ar3
0679 C004      1820            push    ar4
067B C005      1821            push    ar5
067D C0C0      1822            push    _main_mst_1_102
067F C0C1      1823            push    (_main_mst_1_102 + 1)
0681 C0C2      1824            push    (_main_mst_1_102 + 2)
0683 C0C3      1825            push    (_main_mst_1_102 + 3)
0685 8A82      1826            mov     dpl,r2
0687 8B83      1827            mov     dph,r3
0689 8CF0      1828            mov     b,r4
068B ED        1829            mov     a,r5
068C 120000    1830            lcall   ___fsgt
068F AE82      1831            mov     r6,dpl
0691 E581      1832            mov     a,sp
0693 24FC      1833            add     a,#0xfc
0695 F581      1834            mov     sp,a
0697 D005      1835            pop     ar5
0699 D004      1836            pop     ar4
069B D003      1837            pop     ar3
069D D002      1838            pop     ar2
069F EE        1839            mov     a,r6
06A0 6000      1840            jz      L018031?
06A2           1841   ;        D:\clone\LAB5\lab5v3.c:429: mst = period;
06A2 8AC0      1842            mov     _main_mst_1_102,r2
06A4 8BC1      1843            mov     (_main_mst_1_102 + 1),r3
06A6 8CC2      1844            mov     (_main_mst_1_102 + 2),r4
06A8 8DC3      1845            mov     (_main_mst_1_102 + 3),r5
06AA           1846   L018031?:
06AA           1847   ;        D:\clone\LAB5\lab5v3.c:431: waitms(1);
06AA 900001    1848            mov     dptr,#0x0001
06AD 120000    1849            lcall   _waitms
06B0           1850   ;        D:\clone\LAB5\lab5v3.c:401: for (i = 0; i < 10; i++){
06B0 0500      1851            inc     _main_i_1_102
06B2 E4        1852            clr     a
06B3 B500A8    1853            cjne    a,_main_i_1_102,L018130?
06B6 0501      1854            inc     (_main_i_1_102 + 1)
06B8           1855   L018130?:
06B8 020000    1856            ljmp    L018067?
06BB           1857   L018070?:
06BB           1858   ;        D:\clone\LAB5\lab5v3.c:433: for(i=0;i<20;i++){
06BB 7A00      1859            mov     r2,#0x00
06BD 7B00      1860            mov     r3,#0x00
06BF           1861   L018071?:
06BF C3        1862            clr     c
06C0 EA        1863            mov     a,r2
06C1 9414      1864            subb    a,#0x14
06C3 EB        1865            mov     a,r3
06C4 6480      1866            xrl     a,#0x80
06C6 9480      1867            subb    a,#0x80
06C8 4000      1868            jc      L018131?
06CA 020000    1869            ljmp    L018074?
06CD           1870   L018131?:
06CD           1871   ;        D:\clone\LAB5\lab5v3.c:435: v[0] = Volts_at_Pin(QFP32_MUX_P1_4);
06CD 75820A    1872            mov     dpl,#0x0A
06D0 C002      1873            push    ar2
06D2 C003      1874            push    ar3
06D4 120000    1875            lcall   _Volts_at_Pin
06D7 AC82      1876            mov     r4,dpl
06D9 AD83      1877            mov     r5,dph
06DB AEF0      1878            mov     r6,b
06DD FF        1879            mov     r7,a
06DE 78B0      1880            mov     r0,#_main_v_1_102
06E0 A604      1881            mov     @r0,ar4
06E2 08        1882            inc     r0
06E3 A605      1883            mov     @r0,ar5
06E5 08        1884            inc     r0
06E6 A606      1885            mov     @r0,ar6
06E8 08        1886            inc     r0
06E9 A607      1887            mov     @r0,ar7
06EB           1888   ;        D:\clone\LAB5\lab5v3.c:436: v[1] = Volts_at_Pin(QFP32_MUX_P1_5);
06EB 75820B    1889            mov     dpl,#0x0B
06EE 120000    1890            lcall   _Volts_at_Pin
06F1 AC82      1891            mov     r4,dpl
06F3 AD83      1892            mov     r5,dph
06F5 AEF0      1893            mov     r6,b
06F7 FF        1894            mov     r7,a
06F8 78B4      1895            mov     r0,#(_main_v_1_102 + 0x0004)
06FA A604      1896            mov     @r0,ar4
06FC 08        1897            inc     r0
06FD A605      1898            mov     @r0,ar5
06FF 08        1899            inc     r0
0700 A606      1900            mov     @r0,ar6
0702 08        1901            inc     r0
0703 A607      1902            mov     @r0,ar7
0705           1903   ;        D:\clone\LAB5\lab5v3.c:438: if(vmax1<v[0]){
0705 78B0      1904            mov     r0,#_main_v_1_102
0707 8604      1905            mov     ar4,@r0
0709 08        1906            inc     r0
070A 8605      1907            mov     ar5,@r0
070C 08        1908            inc     r0
070D 8606      1909            mov     ar6,@r0
070F 08        1910            inc     r0
0710 8607      1911            mov     ar7,@r0
0712 C004      1912            push    ar4
0714 C005      1913            push    ar5
0716 C006      1914            push    ar6
0718 C007      1915            push    ar7
071A 855082    1916            mov     dpl,_main_vmax1_1_102
071D 855183    1917            mov     dph,(_main_vmax1_1_102 + 1)
0720 8552F0    1918            mov     b,(_main_vmax1_1_102 + 2)
0723 E553      1919            mov     a,(_main_vmax1_1_102 + 3)
0725 120000    1920            lcall   ___fslt
0728 AC82      1921            mov     r4,dpl
072A E581      1922            mov     a,sp
072C 24FC      1923            add     a,#0xfc
072E F581      1924            mov     sp,a
0730 D003      1925            pop     ar3
0732 D002      1926            pop     ar2
0734 EC        1927            mov     a,r4
0735 6000      1928            jz      L018033?
0737           1929   ;        D:\clone\LAB5\lab5v3.c:439: vmax1=v[0];
0737 78B0      1930            mov     r0,#_main_v_1_102
0739 8650      1931            mov     _main_vmax1_1_102,@r0
073B 08        1932            inc     r0
073C 8651      1933            mov     (_main_vmax1_1_102 + 1),@r0
073E 08        1934            inc     r0
073F 8652      1935            mov     (_main_vmax1_1_102 + 2),@r0
0741 08        1936            inc     r0
0742 8653      1937            mov     (_main_vmax1_1_102 + 3),@r0
0744           1938   L018033?:
0744           1939   ;        D:\clone\LAB5\lab5v3.c:441: if(vmax2<v[1]){
0744 78B4      1940            mov     r0,#(_main_v_1_102 + 0x0004)
0746 8604      1941            mov     ar4,@r0
0748 08        1942            inc     r0
0749 8605      1943            mov     ar5,@r0
074B 08        1944            inc     r0
074C 8606      1945            mov     ar6,@r0
074E 08        1946            inc     r0
074F 8607      1947            mov     ar7,@r0
0751 C002      1948            push    ar2
0753 C003      1949            push    ar3
0755 C004      1950            push    ar4
0757 C005      1951            push    ar5
0759 C006      1952            push    ar6
075B C007      1953            push    ar7
075D 85A082    1954            mov     dpl,_main_vmax2_1_102
0760 85A183    1955            mov     dph,(_main_vmax2_1_102 + 1)
0763 85A2F0    1956            mov     b,(_main_vmax2_1_102 + 2)
0766 E5A3      1957            mov     a,(_main_vmax2_1_102 + 3)
0768 120000    1958            lcall   ___fslt
076B AC82      1959            mov     r4,dpl
076D E581      1960            mov     a,sp
076F 24FC      1961            add     a,#0xfc
0771 F581      1962            mov     sp,a
0773 D003      1963            pop     ar3
0775 D002      1964            pop     ar2
0777 EC        1965            mov     a,r4
0778 6000      1966            jz      L018035?
077A           1967   ;        D:\clone\LAB5\lab5v3.c:442: vmax2=v[1];
077A 78B4      1968            mov     r0,#(_main_v_1_102 + 0x0004)
077C 86A0      1969            mov     _main_vmax2_1_102,@r0
077E 08        1970            inc     r0
077F 86A1      1971            mov     (_main_vmax2_1_102 + 1),@r0
0781 08        1972            inc     r0
0782 86A2      1973            mov     (_main_vmax2_1_102 + 2),@r0
0784 08        1974            inc     r0
0785 86A3      1975            mov     (_main_vmax2_1_102 + 3),@r0
0787           1976   L018035?:
0787           1977   ;        D:\clone\LAB5\lab5v3.c:444: waitms(1); 
0787 900001    1978            mov     dptr,#0x0001
078A C002      1979            push    ar2
078C C003      1980            push    ar3
078E 120000    1981            lcall   _waitms
0791 D003      1982            pop     ar3
0793 D002      1983            pop     ar2
0795           1984   ;        D:\clone\LAB5\lab5v3.c:433: for(i=0;i<20;i++){
0795 0A        1985            inc     r2
0796 BA0068    1986            cjne    r2,#0x00,L018134?
0799 0B        1987            inc     r3
079A           1988   L018134?:
079A 020000    1989            ljmp    L018071?
079D           1990   L018074?:
079D           1991   ;        D:\clone\LAB5\lab5v3.c:446: printf("\nperiod=%3.2f\r",mst*1000);
079D C0C0      1992            push    _main_mst_1_102
079F C0C1      1993            push    (_main_mst_1_102 + 1)
07A1 C0C2      1994            push    (_main_mst_1_102 + 2)
07A3 C0C3      1995            push    (_main_mst_1_102 + 3)
07A5 900000    1996            mov     dptr,#0x0000
07A8 75F07A    1997            mov     b,#0x7A
07AB 7444      1998            mov     a,#0x44
07AD 120000    1999            lcall   ___fsmul
07B0 AA82      2000            mov     r2,dpl
07B2 AB83      2001            mov     r3,dph
07B4 ACF0      2002            mov     r4,b
07B6 FD        2003            mov     r5,a
07B7 E581      2004            mov     a,sp
07B9 24FC      2005            add     a,#0xfc
07BB F581      2006            mov     sp,a
07BD C002      2007            push    ar2
07BF C003      2008            push    ar3
07C1 C004      2009            push    ar4
07C3 C005      2010            push    ar5
07C5 74A8      2011            mov     a,#__str_13
07C7 C0E0      2012            push    acc
07C9 74CE      2013            mov     a,#(__str_13 >> 8)
07CB C0E0      2014            push    acc
07CD 7480      2015            mov     a,#0x80
07CF C0E0      2016            push    acc
07D1 120000    2017            lcall   _printf
07D4 E581      2018            mov     a,sp
07D6 24F9      2019            add     a,#0xf9
07D8 F581      2020            mov     sp,a
07DA           2021   ;        D:\clone\LAB5\lab5v3.c:447: printf ("\nV@P1_4=%7.5fV, V@P1_5=%7.5fV\r",vmax1, vmax2);
07DA C0A0      2022            push    _main_vmax2_1_102
07DC C0A1      2023            push    (_main_vmax2_1_102 + 1)
07DE C0A2      2024            push    (_main_vmax2_1_102 + 2)
07E0 C0A3      2025            push    (_main_vmax2_1_102 + 3)
07E2 C050      2026            push    _main_vmax1_1_102
07E4 C051      2027            push    (_main_vmax1_1_102 + 1)
07E6 C052      2028            push    (_main_vmax1_1_102 + 2)
07E8 C053      2029            push    (_main_vmax1_1_102 + 3)
07EA 74E8      2030            mov     a,#__str_14
07EC C0E0      2031            push    acc
07EE 74CE      2032            mov     a,#(__str_14 >> 8)
07F0 C0E0      2033            push    acc
07F2 7480      2034            mov     a,#0x80
07F4 C0E0      2035            push    acc
07F6 120000    2036            lcall   _printf
07F9 E581      2037            mov     a,sp
07FB 24F5      2038            add     a,#0xf5
07FD F581      2039            mov     sp,a
07FF           2040   ;        D:\clone\LAB5\lab5v3.c:449: while(Volts_at_Pin(QFP32_MUX_P1_4)<0.02&&Volts_at_Pin(QFP32_MUX_P1_5<0.02));
07FF           2041   L018037?:
07FF 75820A    2042            mov     dpl,#0x0A
0802 120000    2043            lcall   _Volts_at_Pin
0805 AA82      2044            mov     r2,dpl
0807 AB83      2045            mov     r3,dph
0809 ACF0      2046            mov     r4,b
080B FD        2047            mov     r5,a
080C 740A      2048            mov     a,#0x0A
080E C0E0      2049            push    acc
0810 74D7      2050            mov     a,#0xD7
0812 C0E0      2051            push    acc
0814 74A3      2052            mov     a,#0xA3
0816 C0E0      2053            push    acc
0818 743C      2054            mov     a,#0x3C
081A C0E0      2055            push    acc
081C 8A82      2056            mov     dpl,r2
081E 8B83      2057            mov     dph,r3
0820 8CF0      2058            mov     b,r4
0822 ED        2059            mov     a,r5
0823 120000    2060            lcall   ___fslt
0826 AA82      2061            mov     r2,dpl
0828 E581      2062            mov     a,sp
082A 24FC      2063            add     a,#0xfc
082C F581      2064            mov     sp,a
082E EA        2065            mov     a,r2
082F 6000      2066            jz      L018039?
0831 758200    2067            mov     dpl,#0x00
0834 120000    2068            lcall   _Volts_at_Pin
0837 AA82      2069            mov     r2,dpl
0839 AB83      2070            mov     r3,dph
083B ACF0      2071            mov     r4,b
083D FD        2072            mov     r5,a
083E EA        2073            mov     a,r2
083F 4B        2074            orl     a,r3
0840 4C        2075            orl     a,r4
0841 8DF0      2076            mov     b,r5
0843 C2F7      2077            clr     b.7 ; Clear the sign bit
0845 45F0      2078            orl     a,b
0847 7000      2079            jnz     L018037?
0849           2080   L018039?:
0849           2081   ;        D:\clone\LAB5\lab5v3.c:450: if(Volts_at_Pin(QFP32_MUX_P1_5)>0.02){
0849 75820B    2082            mov     dpl,#0x0B
084C 120000    2083            lcall   _Volts_at_Pin
084F AA82      2084            mov     r2,dpl
0851 AB83      2085            mov     r3,dph
0853 ACF0      2086            mov     r4,b
0855 FD        2087            mov     r5,a
0856 740A      2088            mov     a,#0x0A
0858 C0E0      2089            push    acc
085A 74D7      2090            mov     a,#0xD7
085C C0E0      2091            push    acc
085E 74A3      2092            mov     a,#0xA3
0860 C0E0      2093            push    acc
0862 743C      2094            mov     a,#0x3C
0864 C0E0      2095            push    acc
0866 8A82      2096            mov     dpl,r2
0868 8B83      2097            mov     dph,r3
086A 8CF0      2098            mov     b,r4
086C ED        2099            mov     a,r5
086D 120000    2100            lcall   ___fsgt
0870 AA82      2101            mov     r2,dpl
0872 E581      2102            mov     a,sp
0874 24FC      2103            add     a,#0xfc
0876 F581      2104            mov     sp,a
0878 EA        2105            mov     a,r2
0879 6000      2106            jz      L018041?
087B           2107   ;        D:\clone\LAB5\lab5v3.c:451: p_n=1;
087B 753000    2108            mov     _main_p_n_1_102,#0x00
087E 753100    2109            mov     (_main_p_n_1_102 + 1),#0x00
0881 753280    2110            mov     (_main_p_n_1_102 + 2),#0x80
0884 75333F    2111            mov     (_main_p_n_1_102 + 3),#0x3F
0887 8000      2112            sjmp    L018042?
0889           2113   L018041?:
0889           2114   ;        D:\clone\LAB5\lab5v3.c:454: p_n=-1;
0889 753000    2115            mov     _main_p_n_1_102,#0x00
088C 753100    2116            mov     (_main_p_n_1_102 + 1),#0x00
088F 753280    2117            mov     (_main_p_n_1_102 + 2),#0x80
0892 7533BF    2118            mov     (_main_p_n_1_102 + 3),#0xBF
0895           2119   L018042?:
0895           2120   ;        D:\clone\LAB5\lab5v3.c:456: waitms(1);
0895 900001    2121            mov     dptr,#0x0001
0898 120000    2122            lcall   _waitms
089B           2123   ;        D:\clone\LAB5\lab5v3.c:462: TL0=0; TH0=0; TF0=0;overflow_count=0;
089B 758A00    2124            mov     _TL0,#0x00
089E 758C00    2125            mov     _TH0,#0x00
08A1 C28D      2126            clr     _TF0
08A3 753800    2127            mov     _overflow_count,#0x00
08A6           2128   ;        D:\clone\LAB5\lab5v3.c:463: while(P0_1==1);
08A6           2129   L018043?:
08A6 208128    2130            jb      _P0_1,L018043?
08A9           2131   ;        D:\clone\LAB5\lab5v3.c:464: while(P0_1==0);
08A9           2132   L018046?:
08A9 308168    2133            jnb     _P0_1,L018046?
08AC           2134   ;        D:\clone\LAB5\lab5v3.c:465: while(P0_1==1){
08AC           2135   L018055?:
08AC 3081E8    2136            jnb     _P0_1,L018057?
08AF           2137   ;        D:\clone\LAB5\lab5v3.c:466: while(P0_2==0&&P0_1==1){
08AF           2138   L018052?:
08AF 208268    2139            jb      _P0_2,L018054?
08B2 308168    2140            jnb     _P0_1,L018054?
08B5           2141   ;        D:\clone\LAB5\lab5v3.c:467: TR0=1;
08B5 D28C      2142            setb    _TR0
08B7           2143   ;        D:\clone\LAB5\lab5v3.c:468: if(TF0==1) // Did the 16-bit timer overflow?
08B7           2144   ;        D:\clone\LAB5\lab5v3.c:470: TF0=0;
08B7 108DA8    2145            jbc     _TF0,L018143?
08BA 8000      2146            sjmp    L018052?
08BC           2147   L018143?:
08BC           2148   ;        D:\clone\LAB5\lab5v3.c:471: overflow_count++;
08BC 0538      2149            inc     _overflow_count
08BE 8000      2150            sjmp    L018052?
08C0           2151   L018054?:
08C0           2152   ;        D:\clone\LAB5\lab5v3.c:475: TR0=0; 
08C0 C28C      2153            clr     _TR0
08C2 8000      2154            sjmp    L018055?
08C4           2155   L018057?:
08C4           2156   ;        D:\clone\LAB5\lab5v3.c:477: phase_diff=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
08C4 853882    2157            mov     dpl,_overflow_count
08C7 120000    2158            lcall   ___uchar2fs
08CA AE82      2159            mov     r6,dpl
08CC AF83      2160            mov     r7,dph
08CE AAF0      2161            mov     r2,b
08D0 FB        2162            mov     r3,a
08D1 C006      2163            push    ar6
08D3 C007      2164            push    ar7
08D5 C002      2165            push    ar2
08D7 C003      2166            push    ar3
08D9 900000    2167            mov     dptr,#0x0000
08DC 75F080    2168            mov     b,#0x80
08DF 7447      2169            mov     a,#0x47
08E1 120000    2170            lcall   ___fsmul
08E4 858270    2171            mov     _main_sloc0_1_0,dpl
08E7 858371    2172            mov     (_main_sloc0_1_0 + 1),dph
08EA 85F072    2173            mov     (_main_sloc0_1_0 + 2),b
08ED F573      2174            mov     (_main_sloc0_1_0 + 3),a
08EF E581      2175            mov     a,sp
08F1 24FC      2176            add     a,#0xfc
08F3 F581      2177            mov     sp,a
08F5 858C82    2178            mov     dpl,_TH0
08F8 120000    2179            lcall   ___uchar2fs
08FB AE82      2180            mov     r6,dpl
08FD AF83      2181            mov     r7,dph
08FF AAF0      2182            mov     r2,b
0901 FB        2183            mov     r3,a
0902 C006      2184            push    ar6
0904 C007      2185            push    ar7
0906 C002      2186            push    ar2
0908 C003      2187            push    ar3
090A 900000    2188            mov     dptr,#0x0000
090D 75F080    2189            mov     b,#0x80
0910 7443      2190            mov     a,#0x43
0912 120000    2191            lcall   ___fsmul
0915 AA82      2192            mov     r2,dpl
0917 AB83      2193            mov     r3,dph
0919 ACF0      2194            mov     r4,b
091B FD        2195            mov     r5,a
091C E581      2196            mov     a,sp
091E 24FC      2197            add     a,#0xfc
0920 F581      2198            mov     sp,a
0922 C002      2199            push    ar2
0924 C003      2200            push    ar3
0926 C004      2201            push    ar4
0928 C005      2202            push    ar5
092A 857082    2203            mov     dpl,_main_sloc0_1_0
092D 857183    2204            mov     dph,(_main_sloc0_1_0 + 1)
0930 8572F0    2205            mov     b,(_main_sloc0_1_0 + 2)
0933 E573      2206            mov     a,(_main_sloc0_1_0 + 3)
0935 120000    2207            lcall   ___fsadd
0938 858270    2208            mov     _main_sloc0_1_0,dpl
093B 858371    2209            mov     (_main_sloc0_1_0 + 1),dph
093E 85F072    2210            mov     (_main_sloc0_1_0 + 2),b
0941 F573      2211            mov     (_main_sloc0_1_0 + 3),a
0943 E581      2212            mov     a,sp
0945 24FC      2213            add     a,#0xfc
0947 F581      2214            mov     sp,a
0949 AE8A      2215            mov     r6,_TL0
094B 7F00      2216            mov     r7,#0x00
094D 8E82      2217            mov     dpl,r6
094F 8F83      2218            mov     dph,r7
0951 120000    2219            lcall   ___sint2fs
0954 AE82      2220            mov     r6,dpl
0956 AF83      2221            mov     r7,dph
0958 AAF0      2222            mov     r2,b
095A FB        2223            mov     r3,a
095B C006      2224            push    ar6
095D C007      2225            push    ar7
095F C002      2226            push    ar2
0961 C003      2227            push    ar3
0963 857082    2228            mov     dpl,_main_sloc0_1_0
0966 857183    2229            mov     dph,(_main_sloc0_1_0 + 1)
0969 8572F0    2230            mov     b,(_main_sloc0_1_0 + 2)
096C E573      2231            mov     a,(_main_sloc0_1_0 + 3)
096E 120000    2232            lcall   ___fsadd
0971 AA82      2233            mov     r2,dpl
0973 AB83      2234            mov     r3,dph
0975 ACF0      2235            mov     r4,b
0977 FD        2236            mov     r5,a
0978 E581      2237            mov     a,sp
097A 24FC      2238            add     a,#0xfc
097C F581      2239            mov     sp,a
097E C002      2240            push    ar2
0980 C003      2241            push    ar3
0982 C004      2242            push    ar4
0984 C005      2243            push    ar5
0986 90F4FC    2244            mov     dptr,#0xF4FC
0989 75F032    2245            mov     b,#0x32
098C 7434      2246            mov     a,#0x34
098E 120000    2247            lcall   ___fsmul
0991 AA82      2248            mov     r2,dpl
0993 AB83      2249            mov     r3,dph
0995 ACF0      2250            mov     r4,b
0997 FD        2251            mov     r5,a
0998 E581      2252            mov     a,sp
099A 24FC      2253            add     a,#0xfc
099C F581      2254            mov     sp,a
099E           2255   ;        D:\clone\LAB5\lab5v3.c:479: degrees = p_n*phase_diff*360/mst ;
099E C002      2256            push    ar2
09A0 C003      2257            push    ar3
09A2 C004      2258            push    ar4
09A4 C005      2259            push    ar5
09A6 853082    2260            mov     dpl,_main_p_n_1_102
09A9 853183    2261            mov     dph,(_main_p_n_1_102 + 1)
09AC 8532F0    2262            mov     b,(_main_p_n_1_102 + 2)
09AF E533      2263            mov     a,(_main_p_n_1_102 + 3)
09B1 120000    2264            lcall   ___fsmul
09B4 AA82      2265            mov     r2,dpl
09B6 AB83      2266            mov     r3,dph
09B8 ACF0      2267            mov     r4,b
09BA FD        2268            mov     r5,a
09BB E581      2269            mov     a,sp
09BD 24FC      2270            add     a,#0xfc
09BF F581      2271            mov     sp,a
09C1 C002      2272            push    ar2
09C3 C003      2273            push    ar3
09C5 C004      2274            push    ar4
09C7 C005      2275            push    ar5
09C9 900000    2276            mov     dptr,#0x0000
09CC 75F0B4    2277            mov     b,#0xB4
09CF 7443      2278            mov     a,#0x43
09D1 120000    2279            lcall   ___fsmul
09D4 AA82      2280            mov     r2,dpl
09D6 AB83      2281            mov     r3,dph
09D8 ACF0      2282            mov     r4,b
09DA FD        2283            mov     r5,a
09DB E581      2284            mov     a,sp
09DD 24FC      2285            add     a,#0xfc
09DF F581      2286            mov     sp,a
09E1 C0C0      2287            push    _main_mst_1_102
09E3 C0C1      2288            push    (_main_mst_1_102 + 1)
09E5 C0C2      2289            push    (_main_mst_1_102 + 2)
09E7 C0C3      2290            push    (_main_mst_1_102 + 3)
09E9 8A82      2291            mov     dpl,r2
09EB 8B83      2292            mov     dph,r3
09ED 8CF0      2293            mov     b,r4
09EF ED        2294            mov     a,r5
09F0 120000    2295            lcall   ___fsdiv
09F3 8582F0    2296            mov     _main_degrees_1_102,dpl
09F6 8583F1    2297            mov     (_main_degrees_1_102 + 1),dph
09F9 85F0F2    2298            mov     (_main_degrees_1_102 + 2),b
09FC F5F3      2299            mov     (_main_degrees_1_102 + 3),a
09FE E581      2300            mov     a,sp
0A00 24FC      2301            add     a,#0xfc
0A02 F581      2302            mov     sp,a
0A04           2303   ;        D:\clone\LAB5\lab5v3.c:481: printf("\r\ndegrees: %f", degrees);
0A04 C0F0      2304            push    _main_degrees_1_102
0A06 C0F1      2305            push    (_main_degrees_1_102 + 1)
0A08 C0F2      2306            push    (_main_degrees_1_102 + 2)
0A0A C0F3      2307            push    (_main_degrees_1_102 + 3)
0A0C 74E8      2308            mov     a,#__str_15
0A0E C0E0      2309            push    acc
0A10 74D1      2310            mov     a,#(__str_15 >> 8)
0A12 C0E0      2311            push    acc
0A14 7480      2312            mov     a,#0x80
0A16 C0E0      2313            push    acc
0A18 120000    2314            lcall   _printf
0A1B E581      2315            mov     a,sp
0A1D 24F9      2316            add     a,#0xf9
0A1F F581      2317            mov     sp,a
0A21           2318   ;        D:\clone\LAB5\lab5v3.c:487: if (P2_6==0) {
0A21 30A628    2319            jnb     _P2_6,L018144?
0A24 020000    2320            ljmp    L018059?
0A27           2321   L018144?:
0A27           2322   ;        D:\clone\LAB5\lab5v3.c:488: sprintf(buff1,"vr:%04.2f f:%04.1fHz", (float)vmax1/1.14121356237,(float)1/mst);
0A27 C0C0      2323            push    _main_mst_1_102
0A29 C0C1      2324            push    (_main_mst_1_102 + 1)
0A2B C0C2      2325            push    (_main_mst_1_102 + 2)
0A2D C0C3      2326            push    (_main_mst_1_102 + 3)
0A2F 900000    2327            mov     dptr,#0x0000
0A32 75F080    2328            mov     b,#0x80
0A35 743F      2329            mov     a,#0x3F
0A37 120000    2330            lcall   ___fsdiv
0A3A 858270    2331            mov     _main_sloc0_1_0,dpl
0A3D 858371    2332            mov     (_main_sloc0_1_0 + 1),dph
0A40 85F072    2333            mov     (_main_sloc0_1_0 + 2),b
0A43 F573      2334            mov     (_main_sloc0_1_0 + 3),a
0A45 E581      2335            mov     a,sp
0A47 24FC      2336            add     a,#0xfc
0A49 F581      2337            mov     sp,a
0A4B 7449      2338            mov     a,#0x49
0A4D C0E0      2339            push    acc
0A4F 7413      2340            mov     a,#0x13
0A51 C0E0      2341            push    acc
0A53 7492      2342            mov     a,#0x92
0A55 C0E0      2343            push    acc
0A57 743F      2344            mov     a,#0x3F
0A59 C0E0      2345            push    acc
0A5B 855082    2346            mov     dpl,_main_vmax1_1_102
0A5E 855183    2347            mov     dph,(_main_vmax1_1_102 + 1)
0A61 8552F0    2348            mov     b,(_main_vmax1_1_102 + 2)
0A64 E553      2349            mov     a,(_main_vmax1_1_102 + 3)
0A66 120000    2350            lcall   ___fsdiv
0A69 AC82      2351            mov     r4,dpl
0A6B AD83      2352            mov     r5,dph
0A6D AAF0      2353            mov     r2,b
0A6F FB        2354            mov     r3,a
0A70 E581      2355            mov     a,sp
0A72 24FC      2356            add     a,#0xfc
0A74 F581      2357            mov     sp,a
0A76 C070      2358            push    _main_sloc0_1_0
0A78 C071      2359            push    (_main_sloc0_1_0 + 1)
0A7A C072      2360            push    (_main_sloc0_1_0 + 2)
0A7C C073      2361            push    (_main_sloc0_1_0 + 3)
0A7E C004      2362            push    ar4
0A80 C005      2363            push    ar5
0A82 C002      2364            push    ar2
0A84 C003      2365            push    ar3
0A86 74A8      2366            mov     a,#__str_16
0A88 C0E0      2367            push    acc
0A8A 74D2      2368            mov     a,#(__str_16 >> 8)
0A8C C0E0      2369            push    acc
0A8E 7480      2370            mov     a,#0x80
0A90 C0E0      2371            push    acc
0A92 7400      2372            mov     a,#_main_buff1_1_102
0A94 C0E0      2373            push    acc
0A96 74B6      2374            mov     a,#(_main_buff1_1_102 >> 8)
0A98 C0E0      2375            push    acc
0A9A 7440      2376            mov     a,#0x40
0A9C C0E0      2377            push    acc
0A9E 120000    2378            lcall   _sprintf
0AA1 E581      2379            mov     a,sp
0AA3 24F2      2380            add     a,#0xf2
0AA5 F581      2381            mov     sp,a
0AA7           2382   ;        D:\clone\LAB5\lab5v3.c:489: LCDprint(buff1, 1, 1);
0AA7 75F801    2383            mov     _LCDprint_PARM_2,#0x01
0AAA D268      2384            setb    _LCDprint_PARM_3
0AAC 90B600    2385            mov     dptr,#_main_buff1_1_102
0AAF 75F040    2386            mov     b,#0x40
0AB2 120000    2387            lcall   _LCDprint
0AB5           2388   ;        D:\clone\LAB5\lab5v3.c:491: sprintf(buff2,"vt:%04.2f ph:%4.1f", (float)vmax2/1.14121356237,(float)degrees);
0AB5 7449      2389            mov     a,#0x49
0AB7 C0E0      2390            push    acc
0AB9 7413      2391            mov     a,#0x13
0ABB C0E0      2392            push    acc
0ABD 7492      2393            mov     a,#0x92
0ABF C0E0      2394            push    acc
0AC1 743F      2395            mov     a,#0x3F
0AC3 C0E0      2396            push    acc
0AC5 85A082    2397            mov     dpl,_main_vmax2_1_102
0AC8 85A183    2398            mov     dph,(_main_vmax2_1_102 + 1)
0ACB 85A2F0    2399            mov     b,(_main_vmax2_1_102 + 2)
0ACE E5A3      2400            mov     a,(_main_vmax2_1_102 + 3)
0AD0 120000    2401            lcall   ___fsdiv
0AD3 AA82      2402            mov     r2,dpl
0AD5 AB83      2403            mov     r3,dph
0AD7 ACF0      2404            mov     r4,b
0AD9 FD        2405            mov     r5,a
0ADA E581      2406            mov     a,sp
0ADC 24FC      2407            add     a,#0xfc
0ADE F581      2408            mov     sp,a
0AE0 C0F0      2409            push    _main_degrees_1_102
0AE2 C0F1      2410            push    (_main_degrees_1_102 + 1)
0AE4 C0F2      2411            push    (_main_degrees_1_102 + 2)
0AE6 C0F3      2412            push    (_main_degrees_1_102 + 3)
0AE8 C002      2413            push    ar2
0AEA C003      2414            push    ar3
0AEC C004      2415            push    ar4
0AEE C005      2416            push    ar5
0AF0 7428      2417            mov     a,#__str_17
0AF2 C0E0      2418            push    acc
0AF4 74D3      2419            mov     a,#(__str_17 >> 8)
0AF6 C0E0      2420            push    acc
0AF8 7480      2421            mov     a,#0x80
0AFA C0E0      2422            push    acc
0AFC 7450      2423            mov     a,#_main_buff2_1_102
0AFE C0E0      2424            push    acc
0B00 74B6      2425            mov     a,#(_main_buff2_1_102 >> 8)
0B02 C0E0      2426            push    acc
0B04 7440      2427            mov     a,#0x40
0B06 C0E0      2428            push    acc
0B08 120000    2429            lcall   _sprintf
0B0B E581      2430            mov     a,sp
0B0D 24F2      2431            add     a,#0xf2
0B0F F581      2432            mov     sp,a
0B11           2433   ;        D:\clone\LAB5\lab5v3.c:492: LCDprint(buff2, 2, 1);       
0B11 75F802    2434            mov     _LCDprint_PARM_2,#0x02
0B14 D268      2435            setb    _LCDprint_PARM_3
0B16 90B650    2436            mov     dptr,#_main_buff2_1_102
0B19 75F040    2437            mov     b,#0x40
0B1C 120000    2438            lcall   _LCDprint
0B1F           2439   L018059?:
0B1F           2440   ;        D:\clone\LAB5\lab5v3.c:494: waitms(500); 
0B1F 9001F4    2441            mov     dptr,#0x01F4
0B22 120000    2442            lcall   _waitms
0B25 020000    2443            ljmp    L018060?
0B28           2444   ;        D:\clone\LAB5\lab5v3.c:497: infinit:while(1); 
0B28           2445   L018065?:
0B28 8000      2446            sjmp    L018065?
0B2A           2447            rseg R_CSEG
0B2A           2448   
0000           2449            rseg R_XINIT
0000           2450   
0000           2451            rseg R_CONST
0000           2452   __str_0:
0000 456E7465  2453            db 'Enter passcode: '
     72207061
     7373636F
     64653A20
0010 00        2454            db 0x00
0011           2455   __str_1:
0011 20202020  2456            db '                '
     20202020
     20202020
     20202020
0021 00        2457            db 0x00
0022           2458   __str_2:
0022 54797065  2459            db 'Type what you want to display in line 2 (16 char max): '
     20776861
     7420796F
     75207761
     6E742074
     6F206469
     73706C61
     7920696E
     206C696E
     65203220
     28313620
     63686172
     206D6178
     293A20
0059 00        2460            db 0x00
005A           2461   __str_3:
005A 0A        2462            db 0x0A
005B 00        2463            db 0x00
005C           2464   __str_4:
005C 57726F6E  2465            db 'Wrong Passcode'
     67205061
     7373636F
     6465
006A 00        2466            db 0x00
006B           2467   __str_5:
006B 41747465  2468            db 'Attempts Over '
     6D707473
     204F7665
     7220
0079 00        2469            db 0x00
007A           2470   __str_6:
007A 53797374  2471            db 'System Hang'
     656D2048
     616E67
0085 00        2472            db 0x00
0086           2473   __str_7:
0086 54727920  2474            db 'Try Again'
     41676169
     6E
008F 00        2475            db 0x00
0090           2476   __str_8:
0090 1B        2477            db 0x1B
0091 5B324A    2478            db '[2J'
0094 00        2479            db 0x00
0095           2480   __str_9:
0095 41444320  2481            db 'ADC test program'
     74657374
     2070726F
     6772616D
00A5 0A        2482            db 0x0A
00A6 46696C65  2483            db 'File: %s'
     3A202573
00AE 0A        2484            db 0x0A
00AF 436F6D70  2485            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
00BF 0A        2486            db 0x0A
00C0 0A        2487            db 0x0A
00C1 00        2488            db 0x00
00C2           2489   __str_10:
00C2 443A      2490            db 'D:'
00C4 5C        2491            db 0x5C
00C5 636C6F6E  2492            db 'clone'
     65
00CA 5C        2493            db 0x5C
00CB 4C414235  2494            db 'LAB5'
00CF 5C        2495            db 0x5C
00D0 6C616235  2496            db 'lab5v3.c'
     76332E63
00D8 00        2497            db 0x00
00D9           2498   __str_11:
00D9 4D617220  2499            db 'Mar  7 2024'
     20372032
     303234
00E4 00        2500            db 0x00
00E5           2501   __str_12:
00E5 31353A32  2502            db '15:27:24'
     373A3234
00ED 00        2503            db 0x00
00EE           2504   __str_13:
00EE 0A        2505            db 0x0A
00EF 70657269  2506            db 'period=%3.2f'
     6F643D25
     332E3266
00FB 0D        2507            db 0x0D
00FC 00        2508            db 0x00
00FD           2509   __str_14:
00FD 0A        2510            db 0x0A
00FE 56405031  2511            db 'V@P1_4=%7.5fV, V@P1_5=%7.5fV'
     5F343D25
     372E3566
     562C2056
     4050315F
     353D2537
     2E356656
011A 0D        2512            db 0x0D
011B 00        2513            db 0x00
011C           2514   __str_15:
011C 0D        2515            db 0x0D
011D 0A        2516            db 0x0A
011E 64656772  2517            db 'degrees: %f'
     6565733A
     202566
0129 00        2518            db 0x00
012A           2519   __str_16:
012A 76723A25  2520            db 'vr:%04.2f f:%04.1fHz'
     30342E32
     6620663A
     2530342E
     3166487A
013E 00        2521            db 0x00
013F           2522   __str_17:
013F 76743A25  2523            db 'vt:%04.2f ph:%4.1f'
     30342E32
     66207068
     3A25342E
     3166
0151 00        2524            db 0x00
0152           2525   
0003           2526            CSEG
0003           2527   
0003           2528   end
